    /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.inventario;

import entidades.Sucursal;
import entidades.articulo.Articulo;
import entidades.articulo.PrecioArticulo;
import entidades.inventario.ArticuloInventario;
import entidades.inventario.Inventario;
import entidades.inventario.TipoInventario;
import entidades.usuario.Usuario;
import facade.ArticuloFacade;
import facade.InventarioFacade;
import facade.PrecioArticuloFacade;
import facade.SucursalFacade;
import facade.TipoInventarioFacade;
import includes.Comunes;
import includes.ModeloTablaNoEditable;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.KeyEventDispatcher;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.Timer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import vista.articulos.DiagBuscarArticulo;
import vista.frPrincipal;

/**
 *
 * @author nago
 */
public class DiagInventario extends javax.swing.JDialog {

    private Articulo articulo;
    private List<ArticuloInventario> listaArticuloInventario = new ArrayList<>();
    private ArticuloInventario articuloInventario = new ArticuloInventario();
    private Inventario inventario;
    private ModeloTablaNoEditable modeloTablaArticulos;
    private Usuario usuario;
    private Sucursal sucursal;
    private Sucursal sucursal_bis = null;

    private BigDecimal subTotalArticulo;

    private BigDecimal total;

    private KeyEventDispatcher keyDispaycher;
    private Color color;
    private Color colorPorDefecto;
    private Color colorBoton;
    private PrecioArticulo precioComun;
    private String tipoOperacion;

    /**
     * Creates new form DiagInventario
     */
    public DiagInventario(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public DiagInventario(java.awt.Frame parent,boolean modal, Usuario usuario, Sucursal sucursal, String tipoOperacion) {
        super(parent, modal);
        initComponents();
        this.usuario = usuario;
        this.sucursal = sucursal;
        this.tipoOperacion = tipoOperacion;
        this.setSize(new Dimension(Toolkit.getDefaultToolkit().getScreenSize()));
        this.setTitle("Inventario : " + usuario);
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dpFecha = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        cbMes = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        cbSucursal = new javax.swing.JComboBox<>();
        cboTipoInventario = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        spAnio = new javax.swing.JSpinner();
        btnCalculoII = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        tfCodigo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfDescripcion = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfPrecio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        tfPesoBalanza = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfCantidad = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        tfMonto = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblArticulos = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jPanel1.border.title"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel2.text")); // NOI18N

        cbMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMesActionPerformed(evt);
            }
        });

        jLabel11.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel11.text")); // NOI18N

        cbSucursal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cboTipoInventario.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTipoInventarioItemStateChanged(evt);
            }
        });

        jLabel8.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel8.text")); // NOI18N

        jLabel10.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel10.text")); // NOI18N

        spAnio.setPreferredSize(new java.awt.Dimension(28, 20));

        btnCalculoII.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        btnCalculoII.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/process.png"))); // NOI18N
        btnCalculoII.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.btnCalculoII.text")); // NOI18N
        btnCalculoII.setToolTipText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.btnCalculoII.toolTipText")); // NOI18N
        btnCalculoII.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculoIIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbMes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dpFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                    .addComponent(cbSucursal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel10)
                        .addGap(20, 20, 20)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(spAnio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboTipoInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72)
                .addComponent(btnCalculoII)
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(dpFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(cboTipoInventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnCalculoII))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(spAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cbSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jPanel4.border.title"))); // NOI18N

        tfCodigo.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfCodigo.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.tfCodigo.text")); // NOI18N
        tfCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfCodigoFocusLost(evt);
            }
        });
        tfCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCodigoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel5.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel5.text")); // NOI18N

        tfDescripcion.setEditable(false);
        tfDescripcion.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfDescripcion.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.tfDescripcion.text")); // NOI18N
        tfDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDescripcionActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel6.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel6.text")); // NOI18N

        tfPrecio.setEditable(false);
        tfPrecio.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfPrecio.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.tfPrecio.text")); // NOI18N

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel7.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel7.text")); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jPanel5.border.title"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel3.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel3.text")); // NOI18N

        tfPesoBalanza.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfPesoBalanza.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.tfPesoBalanza.text")); // NOI18N
        tfPesoBalanza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPesoBalanzaActionPerformed(evt);
            }
        });
        tfPesoBalanza.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfPesoBalanzaKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel4.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel4.text")); // NOI18N

        tfCantidad.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfCantidad.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.tfCantidad.text")); // NOI18N
        tfCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCantidadActionPerformed(evt);
            }
        });
        tfCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfCantidadKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addComponent(tfPesoBalanza, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfPesoBalanza)
                    .addComponent(jLabel3)
                    .addComponent(tfCantidad))
                .addContainerGap())
        );

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel14.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel14.text")); // NOI18N

        tfMonto.setEditable(false);
        tfMonto.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfMonto.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.tfMonto.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(tfDescripcion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(tfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jPanel6.border.title"))); // NOI18N

        tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblArticulos);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(217, 217, 217))
        );

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel13.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel13.text")); // NOI18N

        tfTotal.setEditable(false);
        tfTotal.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        tfTotal.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.tfTotal.text")); // NOI18N

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/accept.png"))); // NOI18N
        btnGuardar.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.btnGuardar.text")); // NOI18N
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/refresh.png"))); // NOI18N
        btnCancelar.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.btnCancelar.text")); // NOI18N
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/back.png"))); // NOI18N
        jButton2.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jButton2.text")); // NOI18N
        jButton2.setAlignmentX(0.5F);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel19.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel19.text")); // NOI18N

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel18.setText(org.openide.util.NbBundle.getMessage(DiagInventario.class, "DiagInventario.jLabel18.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGuardar)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void inicializarComponentes() {

        llenarSpAnio();
        cargarCbSucursal();
        cargarCbTipoInventario();
        btnCalculoII.setEnabled(true);
        dpFecha.requestFocus();
        eventosDeTeclas();
        //en caso de que no este la balanza
        if (frPrincipal.peso != null) {
            int delay = 100; //milliseconds (estaba en 40)
            ActionListener taskPerformer = new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    tfPesoBalanza.setText(frPrincipal.peso);

                }
            };
            new Timer(delay, taskPerformer).start();
        } else {
            tfPesoBalanza.setEditable(true);
        }
        habilitar();
        limpiarCampos();
    }
    private void cbMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbMesActionPerformed

    private void cboTipoInventarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTipoInventarioItemStateChanged
        // TODO add your handling code here:
        habilitarBotonCalcularII();
    }//GEN-LAST:event_cboTipoInventarioItemStateChanged

    private void btnCalculoIIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculoIIActionPerformed
        calcularInventarioInicial();
    }//GEN-LAST:event_btnCalculoIIActionPerformed

    private void tfCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfCodigoFocusGained
        tfCodigo.setBackground(color);
    }//GEN-LAST:event_tfCodigoFocusGained

    private void tfCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfCodigoFocusLost
        tfCodigo.setBackground(colorPorDefecto);
    }//GEN-LAST:event_tfCodigoFocusLost

    private void tfCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCodigoActionPerformed

        buscarArticulo();
    }//GEN-LAST:event_tfCodigoActionPerformed

    private void tfDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDescripcionActionPerformed

    private void tfPesoBalanzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPesoBalanzaActionPerformed
        // TODO add your handling code here:
        tfCantidad.requestFocus();
    }//GEN-LAST:event_tfPesoBalanzaActionPerformed

    private void tfPesoBalanzaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPesoBalanzaKeyTyped
        // TODO add your handling code here:
        Comunes.soloNumeros(tfPesoBalanza, evt);
    }//GEN-LAST:event_tfPesoBalanzaKeyTyped

    private void tfCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCantidadActionPerformed
        cargarArticuloPeso();
    }//GEN-LAST:event_tfCantidadActionPerformed

    private void tfCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfCantidadKeyTyped
        // TODO add your handling code here:
        Comunes.soloNumeros(tfCantidad, evt);
    }//GEN-LAST:event_tfCantidadKeyTyped

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        int i = JOptionPane.showConfirmDialog(null, "¿Desea guardar el inventario? \n \n"
                + "Sucursal: " + inventario.getSucursal() + "\n"
                + "Inventario: " + inventario.getTipoInventario() + "\n"
                + "Mes: " + cbMes.getSelectedItem().toString() + "\n"
                + "Año: " + spAnio.getValue() + "", "Confirmar", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            aceptar();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        inicializarComponentes();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cerrar();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiagInventario dialog = new DiagInventario(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculoII;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cbMes;
    private javax.swing.JComboBox<String> cbSucursal;
    private javax.swing.JComboBox<String> cboTipoInventario;
    private org.jdesktop.swingx.JXDatePicker dpFecha;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner spAnio;
    public javax.swing.JTable tblArticulos;
    private javax.swing.JTextField tfCantidad;
    private javax.swing.JTextField tfCodigo;
    private javax.swing.JTextField tfDescripcion;
    private javax.swing.JTextField tfMonto;
    private javax.swing.JTextField tfPesoBalanza;
    private javax.swing.JTextField tfPrecio;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables

    private void calcularInventarioInicial() {
        if (validarDatosCalculo()) {
            Long idInventarioFinal = InventarioFacade.getInstance().buscarUltimoInventarioFinalSucursal((Sucursal) cbSucursal.getSelectedItem());
            System.out.println("ID innventario FInal :" + idInventarioFinal);
            if (idInventarioFinal != null) {
                cargarInventario(InventarioFacade.getInstance().buscar(idInventarioFinal));
                //mostrarInventario(InventarioFacade.getInstance().buscar(idInventarioFinal));
            } else {
                JOptionPane.showMessageDialog(null, "No existe Inventario Final del periodo \n anterior para realizar esta operacion");
            }

        }
    }

    private Boolean validarDatosCalculo() {

        if (cbSucursal.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una Sucursal");
            return false;
        }
        return true;
    }

    private void cargarInventario(Inventario inv) {
        this.inventario = inv;
        incrementarCBOMes(inventario.getMes());
        listaArticuloInventario = inventario.getArticuloInventarios();
        cargarTablaArticulos(listaArticuloInventario);

    }

    private void incrementarCBOMes(int mes) {
        System.out.println("Inventario db mes :" + mes);
        int noviembre = 10;
        if (mes <= noviembre) {
            mes++;
        } else {
            System.out.println("entro cambio de año :" + mes);
            //cuando cambia de año,
            // pasa el mes a 1(enero) y el año se incrementa en ++1
            mes = 0;
            int anioNuevo = Integer.parseInt(spAnio.getValue().toString());
            anioNuevo++;
            spAnio.setValue(anioNuevo);
            System.out.println("entro cambio de año AÑO aunmentado:" + anioNuevo);
            System.out.println("entro cambio de año :" + mes);
        }
        cbMes.setSelectedIndex(mes);
        System.out.println("Inventario db mes despues del cambio :" + mes);
    }

    private void cargarTablaArticulos(List<ArticuloInventario> listaVentaArticulos) {
        modeloTablaArticulos = new ModeloTablaNoEditable();
        cargarEncabezadosTablaArticulos(modeloTablaArticulos);
        configurarTabla(tblArticulos);
        try {
            cargarArticulos(listaVentaArticulos);
        } catch (Exception ex) {
            Logger.getLogger(FrInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarEncabezadosTablaArticulos(ModeloTablaNoEditable modeloTablaArticulos) {
        modeloTablaArticulos.addColumn("Id");
        modeloTablaArticulos.addColumn("Codigo");
        modeloTablaArticulos.addColumn("Articulo");
        modeloTablaArticulos.addColumn("Peso Neto/Cantidad");
        modeloTablaArticulos.addColumn("Precio U.");
        modeloTablaArticulos.addColumn("Monto");
        tblArticulos.setModel(modeloTablaArticulos);
    }

    private void configurarTabla(JTable tbl) {
        JViewport scroll = (JViewport) tbl.getParent();
        int ancho = scroll.getWidth();
        int anchoColumna = 0;
        TableColumnModel modeloColumna = tbl.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (1 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    anchoColumna = (5 * ancho) / 100;
                    break;
            }
            columnaTabla.setPreferredWidth(anchoColumna);
            tbl.setColumnModel(modeloColumna);
        }
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
        tbl.getTableHeader().setBackground(java.awt.Color.WHITE);
        tbl.getTableHeader().setForeground(Color.BLACK);
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 18));
        //Si le queremos cambiar el tamaño a la tablita
        tbl.setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 18));
    }

    private void cargarArticulos(List<ArticuloInventario> listaVentaArticulos) {
        try {
            modeloTablaArticulos = new ModeloTablaNoEditable();
            cargarEncabezadosTablaArticulos(modeloTablaArticulos);
            for (ArticuloInventario ventaArt : listaVentaArticulos) {
                cargarArticulos(ventaArt);
            }
            tblArticulos.setModel(modeloTablaArticulos);
            Comunes.setOcultarColumnasJTable(tblArticulos, 0);
        } catch (Exception ex) {
            Logger.getLogger(FrInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarArticulos(ArticuloInventario ventaArticulo) {

        Object[] fila = new Object[6];
        fila[0] = ventaArticulo.getId();
        fila[1] = ventaArticulo.getArticuloCodigo();
        fila[2] = ventaArticulo.getArticuloDescripcion();
        fila[3] = new DecimalFormat("0.00").format(ventaArticulo.getCantidadPeso());
        fila[4] = new DecimalFormat("0.00").format(ventaArticulo.getPrecio().divide(ventaArticulo.getCantidadPeso()));
        fila[5] = new DecimalFormat("0.00").format(Double.parseDouble(ventaArticulo.getPrecio().toString()));
        modeloTablaArticulos.addRow(fila);
    }

    private void limpiarCamposArticulo() {
        tfCantidad.setText("");
        tfPesoBalanza.setText("");
        tfDescripcion.setText("");
        tfPrecio.setText("");
        tfMonto.setText("");
        subTotalArticulo = new BigDecimal(0.00);
    }

    private void cargarPrecioArticulo() {
        Sucursal suc;
        if (sucursal_bis != null) {
            suc = sucursal_bis;
        } else {
            suc = sucursal;
        }
        precioComun = new PrecioArticulo();
        precioComun = PrecioArticuloFacade.getInstance().getComun(articulo, suc);
        tfPrecio.setText(precioComun.getPrecio().toString());

    }

    @SuppressWarnings("null")
    private void buscarArticulo() {
        /*  */
        Sucursal suc;
        if (sucursal_bis != null) {
            suc = sucursal_bis;
        } else {
            suc = sucursal;
        }
        PrecioArticulo pa;

        Boolean bExiste = false;
        for (int i = 0; i < listaArticuloInventario.size(); i++) {
            if (tfCodigo.getText().equals(listaArticuloInventario.get(i).getArticuloCodigo())) {
                bExiste = true;
                break;
            } else {
                bExiste = false;
            }

        }//for
        if (!bExiste) {
            articulo = ArticuloFacade.getInstance().buscarPorCodigo(tfCodigo.getText());
            if (articulo != null) {
                pa = PrecioArticuloFacade.getInstance().getComun(articulo, suc);
                System.out.println("PA " + pa.getPrecio().compareTo(new BigDecimal("0.00")));
                if (pa != null) {
                    if ((pa.getPrecio().compareTo(new BigDecimal("0.00")) == 0)) {
                        tfCodigo.setText("");
                        JOptionPane.showMessageDialog(null, "Error: Articulo no tiene precio!");
                    } else {
                        if (!articulo.getUnidadMedida().isEsPeso()) {
                            //Es por cantidad
                            limpiarCamposArticulo();
                            tfCodigo.setText(articulo.getCodigoBarra());
                            tfDescripcion.setText(articulo.getDescripcion());
                            tfCantidad.requestFocus();
                        } else {
                            //Es por peso
                            tfCantidad.setText("");
                            cargarArticulo();
                            tfCodigo.selectAll();

                        }
                    }
                } else {
                    tfCodigo.setText("");
                }

            } //if(articulo != null) 
            else {
                DiagBuscarArticulo buscarArticulo = new DiagBuscarArticulo(null, true);
                buscarArticulo.setLocation(Comunes.centrarDialog(buscarArticulo));
                buscarArticulo.setVisible(true);
                if (buscarArticulo.getArticulo() != null) {
                    articulo = buscarArticulo.getArticulo();
                    pa = PrecioArticuloFacade.getInstance().getComun(articulo, suc);
                    if (pa != null) {
                        if ((pa.getPrecio().compareTo(new BigDecimal("0.00")) == 0)) {
                            tfCodigo.setText("");
                            JOptionPane.showMessageDialog(null, "Error: Articulo no tiene precio!");
                        } else {
                            if (!articulo.getUnidadMedida().isEsPeso()) {
                                //Es por cantidad
                                limpiarCamposArticulo();
                                tfCodigo.setText(articulo.getCodigoBarra());
                                tfDescripcion.setText(articulo.getDescripcion());
                                tfCantidad.requestFocus();
                            } else {
                                //Es por peso
                                cargarArticulo();
                                tfCodigo.selectAll();
                            }
                        }
                    } else {
                        tfCodigo.setText("");
                    }//else if (PrecioArticuloFacade.getInstance().getComun(articulo, sucursal) != null)

                }//if (buscarArticulo.getArticulo() != null)

            }//else if(articulo != null)

        } else {

            JOptionPane.showMessageDialog(null,
                    "Ya existe este articulo para este inventario", "Mensaje", JOptionPane.ERROR_MESSAGE);
            tfCodigo.requestFocus();
        }
    }

    private void cargarArticulo() {
        tfCodigo.setText(articulo.getCodigoBarra());
        tfDescripcion.setText(articulo.getDescripcion());
        cargarPrecioArticulo();
        calcularMontoArticulo();

    }

    private void calcularMontoArticulo() {
        if (!articulo.getUnidadMedida().isEsPeso()) {
            //por cantidad

            subTotalArticulo = precioComun.getPrecio().multiply(BigDecimal.valueOf(Double.parseDouble(tfCantidad.getText())));

            tfMonto.setText(new DecimalFormat("0.00").format(Double.parseDouble(subTotalArticulo.toString())));
            tfCantidad.requestFocus();
        } else //por peso
        if (!tfPesoBalanza.getText().isEmpty()) {

            subTotalArticulo = precioComun.getPrecio().multiply(BigDecimal.valueOf(Double.parseDouble(tfPesoBalanza.getText())));
            tfMonto.setText(new DecimalFormat("0.00").format(Double.parseDouble(subTotalArticulo.toString())));
            tfPesoBalanza.requestFocus();
        } else {
            JOptionPane.showMessageDialog(null, "Este es un articulo para pesar!");
            limpiarCamposArticulo();
            tfCodigo.requestFocus();

        }
    }

    private void cargarArticuloPeso() {
        if (articulo != null) {
            cargarArticulo();
            cargarLista();
            agregarArticulo();

        } else {
            //JOptionPane.showMessageDialog(null, "Debe seleccionar un Articulo");
            tfCantidad.setText("");
            tfCodigo.requestFocus();
            tfCodigo.selectAll();
        }

    }

    private void cargarLista() {
        if (validarArticulo()) {
            articuloInventario = new ArticuloInventario();
            articuloInventario.setArticuloDescripcion(articulo.getDescripcionReducida());
            articuloInventario.setArticuloCodigo(articulo.getCodigoBarra());
            //segun sea por peso o cantidad la venta
            if (!articulo.getUnidadMedida().isEsPeso()) {
                articuloInventario.setCantidadPeso(BigDecimal.valueOf(Double.parseDouble(tfCantidad.getText())));
            } else {
                articuloInventario.setCantidadPeso(BigDecimal.valueOf(Double.parseDouble(tfPesoBalanza.getText())));
            }
            articuloInventario.setPrecio(subTotalArticulo);

            total = total.add(subTotalArticulo);
            listaArticuloInventario.add(articuloInventario);
            tfTotal.setText(new DecimalFormat("0.00").format(Double.parseDouble(total.toString())));

        }
    }

    private boolean validarArticulo() {
        /*solo se valida el articulo para el alta*/
        if (articulo == null) {
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar un articulo", "Mensaje", JOptionPane.ERROR_MESSAGE);
            tfCodigo.requestFocus();
            return false;
        }
        if (articulo.getId() != null) {
            if (!articulo.getUnidadMedida().isEsPeso()) {
                if (tfCantidad.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null,
                            "Debe seleccionar cantidad y presionar Enter", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    tfCantidad.requestFocus();
                    return false;

                }
            }
        }

        return true;
    }

    private void agregarArticulo() {

        cargarTablaArticulos(listaArticuloInventario);

        limpiarCamposArticulo();
        //agregados

        tfCodigo.setText("");
        tfCodigo.requestFocus();
        articulo = new Articulo();

    }

    private void habilitarBotonCalcularII() {
        //Preguntamos si se el inventario que se desea calcular es el II
        //en ese caso habilitamos el boton de calcula automatico

        if (((TipoInventario) cboTipoInventario.getSelectedItem()).getDescripcion().contains("INVENTARIO INICIAL")) {
            btnCalculoII.setEnabled(true);
        } else {
            btnCalculoII.setEnabled(false);
        }
    }

    private void aceptar() {

        switch (tipoOperacion) {
            case "Alta":
                if (validarAlta()) {

                    inventario = new Inventario();
                    inventario.setFecha(dpFecha.getDate());
                    inventario.setAnio(Integer.parseInt(spAnio.getValue().toString()));
                    inventario.setMes(cbMes.getSelectedIndex() + 1);
                    inventario.setSucursal((Sucursal) cbSucursal.getSelectedItem());
                    inventario.setTipoInventario((TipoInventario) cboTipoInventario.getSelectedItem());
                    inventario.setTotal(new BigDecimal(tfTotal.getText().replaceAll(",", ".")));
                    inventario.setUsuario(usuario);
                    inventario.setArticuloInventarios(listaArticuloInventario);

                    if (sucursal.getCodigo().equals("1")) {
                        /*SI ES LA CENTRAL, CONEXION LOCAL*/

                        InventarioFacade.getInstance().alta(inventario);
                    } else {
                        /*SI ES SUCURSAL, CONEXION A LA BD CENTRAL*/

                        InventarioFacade.getInstance().altaCentral(inventario);
                    }
                    JOptionPane.showMessageDialog(null, "Datos guardados");

                    deshabilitar();

                }
                break;
            case "Modificacion":
                inventario.setArticuloInventarios(listaArticuloInventario);

                if (sucursal.getCodigo().equals("1")) {
                    if (((Sucursal) cbSucursal.getSelectedItem()).getNombre().equalsIgnoreCase("CENTRAL")) {
                        InventarioFacade.getInstance().modificar(inventario);

                    } else {
                        inventario.setSucursal(sucursal_bis);
                        InventarioFacade.getInstance().modificarCentral(inventario);

                    }

                    JOptionPane.showMessageDialog(null, "Datos modificados");
                } else {
                    JOptionPane.showMessageDialog(null, "Error: NO tiene permisos para esta acción");
                    inicializarComponentes();
                }
                break;

        }

    }

    private boolean validarAlta() {
        /*solo se valida el articulo para el alta*/
        Inventario inv = InventarioFacade.getInstance().buscarPorSucursalMesAnioTipoInventario(sucursal, cbMes.getSelectedIndex() + 1, Integer.parseInt(spAnio.getValue().toString()), (TipoInventario) cboTipoInventario.getSelectedItem());
        if (inv != null) {
            JOptionPane.showMessageDialog(null,
                    "Ya existe cargado ese periodo", "Mensaje", JOptionPane.ERROR_MESSAGE);
            cbMes.requestFocus();
            return false;

        }
        if (articulo == null) {

        }
        if (articulo.getId() != null) {
            if (!articulo.getUnidadMedida().isEsPeso()) {
                if (tfCantidad.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null,
                            "Debe seleccionar cantidad y presionar Enter", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    tfCantidad.requestFocus();
                    return false;

                }
            }
        }

        return true;
    }

    private void deshabilitar() {
        dpFecha.setEnabled(false);
        cbMes.setEnabled(false);
        spAnio.setEnabled(false);
    }

    private void llenarSpAnio() {
        int year = Calendar.getInstance().get(Calendar.YEAR);
        spAnio.setValue(year);
    }

    private void cargarCbSucursal() {
        Comunes.cargarJComboConBlanco(cbSucursal, SucursalFacade.getInstance().getTodos());
        cbSucursal.setSelectedItem(sucursal);
        if (sucursal.getNombre().contains("CENTRAL")) {
            cbSucursal.setEnabled(true);
        } else {
            cbSucursal.setEnabled(false);
        }
    }

    private void cargarCbTipoInventario() {
        Comunes.cargarJCombo(cboTipoInventario, TipoInventarioFacade.getInstance().getTodos());
    }

    private void eventosDeTeclas() {
        //Fz
        //agregar
        /*    getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
         KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0), "agregar");
         getRootPane().getActionMap().put("agregar", new AbstractAction() {
         @Override
         public void actionPerformed(ActionEvent e) {

         //guardarInventario();
         cargarLista();
         agregarArticulo();                



         }
         });*/

//cerrar
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), "cerrar");
        getRootPane().getActionMap().put("cerrar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cerrar();
            }
        });

//borrar
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "borrar");
        getRootPane().getActionMap().put("borrar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (tblArticulos.getSelectedRow() != -1) {
                    quitarArticuloLista();
                }
            }
        });
//confirmar
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(
                KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), "confirmar");
        getRootPane().getActionMap().put("confirmar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (tblArticulos.isFocusOwner()) {
                    //                   btnConfirmarPesada.requestFocus();
                }
            }
        });

        //evento que actualiza subtotales de pesaje cuando cambia el contenido pesado en la balanza
        tfPesoBalanza.getDocument().addDocumentListener(
                new javax.swing.event.DocumentListener() {

            public void insertUpdate(javax.swing.event.DocumentEvent evt) {
                actualizarSubtotal();

            }

            public void removeUpdate(javax.swing.event.DocumentEvent evt) {
                actualizarSubtotal();

            }

            public void changedUpdate(javax.swing.event.DocumentEvent evt) {
                actualizarSubtotal();

            }

        });

    }

    public void cerrar() {
        this.dispose();
    }

    public void quitarArticuloLista() {
        int i = JOptionPane.showConfirmDialog(null, "¿Desea eliminar el articulo seleccionado?", "Confirmar eliminacion", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            int selectedRow = tblArticulos.getSelectedRow();
            String sValor = ((String) tblArticulos.getValueAt(selectedRow, 5)).trim().replace(",", ".");
            BigDecimal bgMonto = new BigDecimal(sValor);
            String sTotal = tfTotal.getText().replace(",", ".");
            total = new BigDecimal(sTotal).subtract(bgMonto);//
//            inventario.setId(Long.valueOf(tfInventario.getText()));
            inventario.setTotal(total);
            listaArticuloInventario.remove(selectedRow);
            inventario.setArticuloInventarios(listaArticuloInventario);
///            InventarioFacade.getInstance().modificar(inventario);            

            ((ModeloTablaNoEditable) tblArticulos.getModel()).removeRow(selectedRow);
            tfTotal.setText(new DecimalFormat("0.00").format(total));

///            tfCodigo.requestFocus();
///            tfCodigo.selectAll();
        }
    }

    private void actualizarSubtotal() {

        if (articulo != null && articulo.getId() != null) {
            if (articulo.getUnidadMedida().isEsPeso()) {
                if (!tfPesoBalanza.getText().isEmpty()) {
                    //cargarArticulo();

                    subTotalArticulo = precioComun.getPrecio().multiply(BigDecimal.valueOf(Double.parseDouble(tfPesoBalanza.getText())));
                }

            }
        }

    }

    private void habilitar() {
        dpFecha.setEnabled(true);
        cbMes.setEnabled(true);
        spAnio.setEnabled(true);
    }

    private void limpiarCampos() {
        cargarTabla();
        limpiarCamposArticulo();
        listaArticuloInventario = new ArrayList<>();
//        listaArtInv_guardar = new ArrayList<>();
        tfCodigo.setText("");
        tfTotal.setText("");
        articulo = null;
        total = new BigDecimal(0.00);
        inventario = null;
        articuloInventario = null;
        sucursal_bis = null;

    }

    private void cargarTabla() {
        modeloTablaArticulos = new ModeloTablaNoEditable();
        cargarEncabezadosTablaArticulos(modeloTablaArticulos);
        configurarTabla(tblArticulos);
        Comunes.setOcultarColumnasJTable(tblArticulos, 0);
    }
}
