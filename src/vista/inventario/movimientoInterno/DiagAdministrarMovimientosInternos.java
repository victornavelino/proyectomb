/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.inventario.movimientoInterno;

import entidades.Sucursal;
import entidades.inventario.MovimientoInterno;
import entidades.usuario.Usuario;
import facade.MovimientoInternoFacade;
import facade.SucursalFacade;
import includes.Comunes;
import includes.ExportarExcel;
import includes.Impresora;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author walter
 */
public class DiagAdministrarMovimientosInternos extends javax.swing.JDialog {

    private List<MovimientoInterno> datos;
    SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
    private Usuario usuario;
    private Sucursal sucursal;
    List<MovimientoInterno> arrayReimpresion = new ArrayList<>();

    // Defino aqui el modelo de la tabla para que lo cree una sola vez
    DefaultTableModel modeloTabla = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };

    /**
     * Creates new form DiagAdministrarMovimientosInternos
     */
    public DiagAdministrarMovimientosInternos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        inicializarComponentes();
    }

    public DiagAdministrarMovimientosInternos(java.awt.Frame parent, boolean modal, Usuario usuario, Sucursal sucursal) {
        super(parent, modal);
        initComponents();
        this.usuario = usuario;
        this.sucursal = sucursal;
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAgregar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        tfTotalEgresos = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfTotalIngresos = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();
        btnEliminar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dpFechaInicio = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        dpFechaFin = new org.jdesktop.swingx.JXDatePicker();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbSucursal = new javax.swing.JComboBox<>();
        btnReimprimir = new javax.swing.JButton();
        btnRecepcionar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnAgregar.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.btnAgregar.text")); // NOI18N
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jPanel1.border.title"))); // NOI18N

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDatos);

        jLabel4.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jLabel4.text")); // NOI18N

        tfTotalEgresos.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        tfTotalEgresos.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.tfTotalEgresos.text")); // NOI18N
        tfTotalEgresos.setDisabledTextColor(new java.awt.Color(250, 9, 9));

        jLabel5.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jLabel5.text")); // NOI18N

        tfTotalIngresos.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        tfTotalIngresos.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.tfTotalIngresos.text")); // NOI18N
        tfTotalIngresos.setDisabledTextColor(new java.awt.Color(24, 151, 8));

        jLabel6.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jLabel6.text")); // NOI18N

        tfTotal.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        tfTotal.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.tfTotal.text")); // NOI18N
        tfTotal.setDisabledTextColor(new java.awt.Color(10, 32, 238));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTotalEgresos, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTotalIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfTotalEgresos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(tfTotalIngresos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnEliminar.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.btnEliminar.text")); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/close.png"))); // NOI18N
        btnSalir.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.btnSalir.text")); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/back.png"))); // NOI18N
        btnExportar.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.btnExportar.text")); // NOI18N
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jPanel2.border.title"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jLabel1.text")); // NOI18N

        dpFechaInicio.setFormats("dd/MM/yyyy");

        jLabel2.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jLabel2.text")); // NOI18N

        dpFechaFin.setFormats("dd/MM/yyyy");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar2.png"))); // NOI18N
        jButton1.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.jLabel3.text")); // NOI18N

        cmbSucursal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(dpFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dpFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dpFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(dpFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel3)
                    .addComponent(cmbSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnReimprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/print.png"))); // NOI18N
        btnReimprimir.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.btnReimprimir.text")); // NOI18N
        btnReimprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReimprimirActionPerformed(evt);
            }
        });

        btnRecepcionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/list.png"))); // NOI18N
        btnRecepcionar.setText(org.openide.util.NbBundle.getMessage(DiagAdministrarMovimientosInternos.class, "DiagAdministrarMovimientosInternos.btnRecepcionar.text")); // NOI18N
        btnRecepcionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecepcionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExportar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(btnReimprimir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRecepcionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar)
                        .addGap(34, 34, 34)
                        .addComponent(btnRecepcionar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReimprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExportar)
                        .addGap(18, 18, 18)
                        .addComponent(btnSalir))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        btnReimprimir.setEnabled(false);
        DiagAltaMovimientosInternos altaMovimientoInterno = new DiagAltaMovimientosInternos(null, true, sucursal, usuario);
        altaMovimientoInterno.setLocation(Comunes.centrarDialog(altaMovimientoInterno));
        altaMovimientoInterno.setVisible(true);

        traerDatos();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        traerDatos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        exportar();
    }//GEN-LAST:event_btnExportarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarMovimientoInterno();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void tblDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatosMouseClicked
        verificarSeleccion();
    }//GEN-LAST:event_tblDatosMouseClicked

    private void btnReimprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReimprimirActionPerformed
        reimprimir();
    }//GEN-LAST:event_btnReimprimirActionPerformed

    private void btnRecepcionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecepcionarActionPerformed
        recepcionarMovimientoInterno();
    }//GEN-LAST:event_btnRecepcionarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagAdministrarMovimientosInternos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagAdministrarMovimientosInternos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagAdministrarMovimientosInternos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagAdministrarMovimientosInternos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiagAdministrarMovimientosInternos dialog = new DiagAdministrarMovimientosInternos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnRecepcionar;
    private javax.swing.JButton btnReimprimir;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbSucursal;
    private org.jdesktop.swingx.JXDatePicker dpFechaFin;
    private org.jdesktop.swingx.JXDatePicker dpFechaInicio;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTextField tfTotal;
    private javax.swing.JTextField tfTotalEgresos;
    private javax.swing.JTextField tfTotalIngresos;
    // End of variables declaration//GEN-END:variables

    private void inicializarComponentes() {
        this.setTitle("Administración de Movimientos Internos");
        if (this.sucursal.getNombre().equals("CENTRAL")) {
            cargarComboSucursal();
        } else {
            cmbSucursal.setEnabled(false);
        }

        cargarTablaEncabezados();
        tfTotalEgresos.setEnabled(false);
        tfTotalIngresos.setEnabled(false);
        tfTotal.setEnabled(false);
        btnExportar.setEnabled(false);
        btnReimprimir.setEnabled(false);
        btnRecepcionar.setEnabled(false);
        btnEliminar.setEnabled(false);

        if (usuario.getGrupo().getNombre().equals("admin")) {
            jLabel3.setVisible(true);
            cmbSucursal.setVisible(true);
        } else {
            jLabel3.setVisible(false);
            cmbSucursal.setVisible(false);
        }
    }

    private void cargarComboSucursal() {
        List<Sucursal> listaSucursales = SucursalFacade.getInstance().getTodos();

        DefaultComboBoxModel modeloCombo = new DefaultComboBoxModel();
        modeloCombo.addElement("Seleccionar...");
        for (Sucursal suc : listaSucursales) {
            modeloCombo.addElement(suc);
        }
        cmbSucursal.setModel(modeloCombo);
    }

    private void cargarTablaEncabezados() {
        modeloTabla.addColumn("id");
        modeloTabla.addColumn("N° Lote");
        modeloTabla.addColumn("N°");
        modeloTabla.addColumn("Fecha");
        modeloTabla.addColumn("Movi");
        modeloTabla.addColumn("N° Origen");
        modeloTabla.addColumn("Código");
        modeloTabla.addColumn("Artículo");
        modeloTabla.addColumn("Precio");
        modeloTabla.addColumn("Cantidad");
        modeloTabla.addColumn("Monto");
        modeloTabla.addColumn("Estado");
        modeloTabla.addColumn("Suc Envío");
        modeloTabla.addColumn("Suc Destino");
        tblDatos.setModel(modeloTabla);
    }

    private void traerDatos() {
        limpiarTabla();
        //SI ES CENTRAL LA CONEXION ES LOCALHOST
        System.out.println("sucursal" + sucursal);
        if (this.sucursal.getNombre().equals("CENTRAL")) {
            if (cmbSucursal.getSelectedIndex() > 0) {
                datos = facade.MovimientoInternoFacade.getInstance().
                        buscarPorRangoFechaSucursal(dpFechaInicio.getDate(),
                                dpFechaFin.getDate(), (Sucursal) cmbSucursal.getSelectedItem());
            } else {
                datos = facade.MovimientoInternoFacade.getInstance().
                        buscarPorRangoFecha(dpFechaInicio.getDate(),
                                dpFechaFin.getDate());
            }

        } else {
            //SI ES SUCURSAL VE SOLO LO DE SU SUCURSAL
            datos = facade.MovimientoInternoFacade.getInstance().
                    buscarPorSucursalRangoFecha(this.sucursal, dpFechaInicio.getDate(),
                            dpFechaFin.getDate());
        }

        if (!datos.isEmpty()) {
            cargarTabla(datos);
            calcularTotales(datos);
            btnExportar.setEnabled(true);
        } else {
            limpiarTotales();
            JOptionPane.showMessageDialog(rootPane, "Sin resultados");
            btnExportar.setEnabled(false);
        }
    }

    public void cargarTabla(List<MovimientoInterno> datos) {
        Object[] fila = new Object[14];
        for (int i = 0; i < datos.size(); i++) {
            // Verifico que no muestre los registro tipo ingresos para la sucursal
            // que envía
            if (datos.get(i).getSucursal().getNombre().equals(sucursal.getNombre())
                    && datos.get(i).getTipoDeMovimiento().equals("ING")) {
                continue;
            }

            // Verifico que no muestre los registros de tipo egreso para las sucursales
            // destino
            try {
                if (datos.get(i).getSucursalDestino().getNombre().equals(sucursal.getNombre())
                        && datos.get(i).getTipoDeMovimiento().equals("EGRE")) {
                    continue;
                }
            } catch (Exception e) {
            }

            modeloTabla.isCellEditable(i, 0);
            modeloTabla.isCellEditable(i, 1);
            modeloTabla.isCellEditable(i, 2);
            modeloTabla.isCellEditable(i, 3);
            modeloTabla.isCellEditable(i, 4);
            modeloTabla.isCellEditable(i, 5);
            modeloTabla.isCellEditable(i, 6);
            modeloTabla.isCellEditable(i, 7);
            modeloTabla.isCellEditable(i, 8);
            modeloTabla.isCellEditable(i, 9);
            modeloTabla.isCellEditable(i, 10);
            modeloTabla.isCellEditable(i, 11);
            modeloTabla.isCellEditable(i, 12);
            modeloTabla.isCellEditable(i, 13);
            fila[0] = datos.get(i).getId();
            fila[1] = datos.get(i).getNumeroLote();
            fila[2] = datos.get(i).getNumero();
            fila[3] = formato.format(datos.get(i).getFecha());
            fila[4] = datos.get(i).getTipoDeMovimiento();
            fila[5] = datos.get(i).getIdTransformado();
            fila[6] = datos.get(i).getArticuloCodigo();
            fila[7] = datos.get(i).getArticuloDescripcion();
            fila[8] = datos.get(i).getMonto();
            fila[9] = datos.get(i).getCantidad();
            fila[10] = datos.get(i).getCantidad().
                    multiply(datos.get(i).getMonto()).setScale(2, BigDecimal.ROUND_CEILING);
            fila[11] = datos.get(i).getEstado().toUpperCase();
            fila[12] = datos.get(i).getSucursal();
            fila[13] = datos.get(i).getSucursalDestino();

            modeloTabla.addRow(fila);
            // Agrego la fila para al array utilizado en la impresión ya que el 
            // array datos tiene mas daros que la cantidad de registros que se
            // muestran en la tabla
            arrayReimpresion.add(datos.get(i));
        }
        tblDatos.setModel(modeloTabla);
    }

    private void limpiarTabla() {
        for (int j = tblDatos.getRowCount() - 1; j >= 0; j--) {
            modeloTabla.removeRow(j);
        }
    }

    public List<MovimientoInterno> quitarFila(int fila) {
        datos.remove(fila);
        return datos;
    }

    private void exportar() {
        new ExportarExcel().crearExcelJtable(tblDatos, "Listado de Movimientos Internos");
    }

    private void eliminarMovimientoInterno() {
        btnReimprimir.setEnabled(false);
        //int numFila = tblDatos.getSelectedRow();
        
        MovimientoInterno movi = MovimientoInternoFacade.getInstance().buscar((Long) tblDatos.getValueAt(tblDatos.getSelectedRow(), 0));
        System.out.println("el id seleccionado es" + movi.getId());

        int eleccion = JOptionPane.showConfirmDialog(rootPane, "Esta seguro "
                + "que desea eliminar el movimiento número"
                + movi.getNumero() + " ?",
                "Confirma Eliminacion?", JOptionPane.YES_NO_OPTION);
        if (eleccion == 0) {
            movi.setAnulado(true);
            //facade.MovimientoInternoFacade.getInstance().eliminar(movi.getId());
           
                facade.MovimientoInternoFacade.getInstance().modificar(movi, this.sucursal);
           
                //facade.MovimientoInternoFacade.getInstance().modificarSinCBOSucursal(movi);
           

            traerDatos();
            limpiarTabla();
            cargarTabla(datos);
            calcularTotales(datos);
            JOptionPane.showMessageDialog(rootPane, "El movimiento fue eliminado");
        }
    }

    private void reimprimir() {
        // Obtengo el número de fila
        int numFila = tblDatos.getSelectedRow();

        // Traigo el movimiento de acuerdo al número de fila
        MovimientoInterno movi = arrayReimpresion.get(numFila);

        // Obtengo el numero de lote del registro seleccionado
        int numLote = movi.getNumeroLote();

        // Triaigo los registros que coincidencon ese número de lote
        List<MovimientoInterno> registros = facade.MovimientoInternoFacade.
                getInstance().buscarPorNumeroLote(numLote);

        // Recorro la lista devuelta y verifico si el movimiento es un egreso 
        // o un - que es lo único que se debe imprimir  para que no salgas datos 
        // duplicados
        List<MovimientoInterno> registrosImp = new ArrayList<>();
        for (int i = 0; i < registros.size(); i++) {
            try {
                if (registros.get(i).getTipoDeMovimiento().equals("EGRE")
                        || registros.get(i).getTipoDeMovimiento().equals("-")) {
                    registrosImp.add(registros.get(i));
                }
            } catch (Exception e) {
            }
        }
        /**
         * *** IMPRESION DEL COMPROBANTE ****
         */
        try {
            new Impresora().imprimir(registrosImp, "ORIGINAL");
            new Impresora().imprimir(registrosImp, "COPIA");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error imprimiendo, compruebe impresora!");
        }

        btnReimprimir.setEnabled(false);
    }

    private void calcularTotales(List<MovimientoInterno> datos) {
        limpiarTotales();

        BigDecimal totalIngresos = new BigDecimal(0).setScale(2, BigDecimal.ROUND_CEILING);
        BigDecimal totalEgresos = new BigDecimal(0).setScale(2, BigDecimal.ROUND_CEILING);
        BigDecimal total = new BigDecimal(0).setScale(2, BigDecimal.ROUND_CEILING);

        for (int i = 0; i < datos.size(); i++) {

            // Verifico que no muestre los registro tipo ingresos para la sucursal
            // que envía
            if (datos.get(i).getSucursal().getNombre().equals(sucursal.getNombre())
                    && datos.get(i).getTipoDeMovimiento().equals("ING")) {
                continue;
            }

            // Verifico que no muestre los registros de tipo egreso para las sucursales
            // destino
            try {
                if (datos.get(i).getSucursalDestino().getNombre().equals(sucursal.getNombre())
                        && datos.get(i).getTipoDeMovimiento().equals("EGRE")) {
                    continue;
                }
            } catch (Exception e) {
            }

            if (datos.get(i).getTipoDeMovimiento().equals("EGRE")) {
                totalEgresos = totalEgresos.add(datos.get(i).getMonto().
                        multiply(datos.get(i).getCantidad())).
                        setScale(2, BigDecimal.ROUND_CEILING);
            }

            if (datos.get(i).getTipoDeMovimiento().equals("DEC")) {
                totalEgresos = totalEgresos.add(datos.get(i).getMonto().
                        multiply(datos.get(i).getCantidad())).
                        setScale(2, BigDecimal.ROUND_CEILING);
            }

            if (datos.get(i).getTipoDeMovimiento().equals("TRS")) {
                totalEgresos = totalEgresos.add(datos.get(i).getMonto().
                        multiply(datos.get(i).getCantidad())).
                        setScale(2, BigDecimal.ROUND_CEILING);
            }

            if (datos.get(i).getTipoDeMovimiento().equals("TRE")) {
                totalIngresos = totalIngresos.add(datos.get(i).getMonto().
                        multiply(datos.get(i).getCantidad())).
                        setScale(2, BigDecimal.ROUND_CEILING);
            }

            if (datos.get(i).getTipoDeMovimiento().equals("ING")) {
                totalIngresos = totalIngresos.add(datos.get(i).getMonto().
                        multiply(datos.get(i).getCantidad())).
                        setScale(2, BigDecimal.ROUND_CEILING);
            }
        }
        total = totalIngresos.subtract(totalEgresos);

        tfTotalEgresos.setText(String.valueOf(totalEgresos));
        tfTotalIngresos.setText(String.valueOf(totalIngresos));
        tfTotal.setText(String.valueOf(total));
    }

    private void limpiarTotales() {
        tfTotal.setText("");
        tfTotalEgresos.setText("");
        tfTotalIngresos.setText("");
    }

    private void recepcionarMovimientoInterno() {
        DiagRecepcionMovimientoInterno recepcionMovimientoInterno
                = new DiagRecepcionMovimientoInterno(null, true, this.usuario, this.sucursal, (int) tblDatos.getValueAt(tblDatos.getSelectedRow(), 1));
        recepcionMovimientoInterno.setLocation(Comunes.centrarDialog(recepcionMovimientoInterno));
        recepcionMovimientoInterno.setVisible(true);

        btnRecepcionar.setEnabled(false);

        traerDatos();
    }

    private void verificarSeleccion() {
        // Verifico que tenga seleccionado una fila para poder habilitar cierto
        // botones
        if (tblDatos.getSelectedRows().length > 0) {
            if (usuario.getGrupo().getNombre().equals("admin")) {
                btnEliminar.setEnabled(true);
            }
            if (tblDatos.getValueAt(tblDatos.getSelectedRow(), 11).equals(sucursal)) {
                btnReimprimir.setEnabled(true);
            }

            // Verifico si la fila seleccionada tiene estado abierto y es un
            // ingreso, es es verdadero es el único caso que habilita el botón
            if (tblDatos.getValueAt(tblDatos.getSelectedRow(), 4).equals("ING")
                    && tblDatos.getValueAt(tblDatos.getSelectedRow(), 11).equals("ABIERTO")) {
                btnRecepcionar.setEnabled(true);
            }
        } else {
            btnEliminar.setEnabled(false);
            btnReimprimir.setEnabled(false);
            btnRecepcionar.setEnabled(false);
        }
    }
}
