/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.Caja;

import Recursos.AutoCompletion;
import entidades.Sucursal;
import entidades.caja.CobranzaCtaCte;
import entidades.caja.CuentaCorriente;
import entidades.cliente.Cliente;
import entidades.usuario.Usuario;
import entidades.venta.Venta;
import entidades.caja.VentaCobranza;
import entidades.cliente.Organismo;
import entidades.cliente.Persona;
import facade.ClienteFacade;
import facade.CobranzaCtaCteFacade;
import facade.CuentaCorrienteFacade;
import facade.MovimientoCajaFacade;
import facade.VentaFacade;
import includes.ColorearTabla;
import includes.Comunes;
import includes.ExportarExcel;
import includes.ModeloTablaNoEditable;
import java.awt.Color;
import java.awt.Component;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Column;
import javax.persistence.Temporal;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.apache.poi.hssf.record.formula.TblPtg;
import vista.ventas.DiagBuscarCliente;

/**
 *
 * @author bangho
 */
public class DiagCuentasCorrientes extends javax.swing.JDialog {

    private ModeloTablaNoEditable modeloTablaVentaCobranza;
    private ModeloTablaNoEditable modeloTablaSaldos;
    private List<VentaCobranza> listaVentaCobranza = new ArrayList<>();
    private List<CuentaCorriente> listaCuentasCorrientes = new ArrayList<>();
    private List<Cliente> listaClientes = new ArrayList<Cliente>();
    private Cliente cliente;
    private Cliente clienteSaldo;
    private BigDecimal saldoTotal = new BigDecimal(0.00);
    private SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm");
    private Sucursal sucursal;
    private Usuario usuario;
    private AutoCompletion autoCompletion;
    private List<CobranzaCtaCte> listaCobranza;

    /**
     * Creates new form DiagCuentasCorrientes
     *
     * @param parent
     * @param modal
     * @param usuario
     */
    public DiagCuentasCorrientes(java.awt.Frame parent, boolean modal, Usuario usuario, Sucursal sucursal) {
        super(parent, modal);
        initComponents();
        this.usuario = usuario;
        this.setTitle("Cuentas Corrientes");
        inicializarComponentes();
        this.sucursal = sucursal;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        actionContainerFactory1 = new org.jdesktop.swingx.action.ActionContainerFactory();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        rbCliente = new javax.swing.JRadioButton();
        rbFecha = new javax.swing.JRadioButton();
        cbVentas = new javax.swing.JCheckBox();
        cbCobranzas = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbVentaCobranza = new javax.swing.JTable();
        tfTotal = new javax.swing.JTextField();
        pnCliente = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnCobranza = new javax.swing.JButton();
        tfCliente = new javax.swing.JTextField();
        btnBuscarCliente = new javax.swing.JButton();
        ftfDocumento = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        pnFechas = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dpDesde = new org.jdesktop.swingx.JXDatePicker();
        dpHasta = new org.jdesktop.swingx.JXDatePicker();
        btnConsultar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        pnCliente1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        ftfDocumentoSaldo = new javax.swing.JFormattedTextField();
        btnBuscarClienteSaldo = new javax.swing.JButton();
        tfClienteSaldo = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbSaldosClientes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTabbedPane1.setName("Cuentas Corrientes"); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup1.add(rbCliente);
        rbCliente.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.rbCliente.text")); // NOI18N
        rbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbClienteActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbFecha);
        rbFecha.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.rbFecha.text")); // NOI18N
        rbFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFechaActionPerformed(evt);
            }
        });

        cbVentas.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.cbVentas.text")); // NOI18N
        cbVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVentasActionPerformed(evt);
            }
        });

        cbCobranzas.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.cbCobranzas.text")); // NOI18N
        cbCobranzas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCobranzasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(rbCliente)
                .addGap(27, 27, 27)
                .addComponent(rbFecha)
                .addGap(41, 41, 41)
                .addComponent(cbVentas)
                .addGap(40, 40, 40)
                .addComponent(cbCobranzas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCliente)
                    .addComponent(rbFecha)
                    .addComponent(cbVentas)
                    .addComponent(cbCobranzas))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jPanel5.border.title"))); // NOI18N

        tbVentaCobranza.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbVentaCobranza);

        tfTotal.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.tfTotal.text")); // NOI18N

        pnCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.pnCliente.border.title"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jLabel1.text")); // NOI18N

        btnCobranza.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.btnCobranza.text")); // NOI18N
        btnCobranza.setEnabled(false);
        btnCobranza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCobranzaActionPerformed(evt);
            }
        });

        tfCliente.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.tfCliente.text")); // NOI18N

        btnBuscarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar2.png"))); // NOI18N
        btnBuscarCliente.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.btnBuscarCliente.text")); // NOI18N
        btnBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteActionPerformed(evt);
            }
        });

        ftfDocumento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("########"))));
        ftfDocumento.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.ftfDocumento.text")); // NOI18N
        ftfDocumento.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        ftfDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftfDocumentoActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        jButton1.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnClienteLayout = new javax.swing.GroupLayout(pnCliente);
        pnCliente.setLayout(pnClienteLayout);
        pnClienteLayout.setHorizontalGroup(
            pnClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(pnClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnClienteLayout.createSequentialGroup()
                        .addComponent(ftfDocumento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCobranza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        pnClienteLayout.setVerticalGroup(
            pnClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnClienteLayout.createSequentialGroup()
                .addGroup(pnClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnClienteLayout.createSequentialGroup()
                        .addGroup(pnClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(ftfDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnClienteLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCobranza, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(pnClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)))
        );

        pnFechas.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.pnFechas.border.title"))); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jLabel3.text")); // NOI18N

        dpDesde.setFormats("dd/MM/yyyy");

        dpHasta.setFormats("dd/MM/yyyy");

        btnConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar2.png"))); // NOI18N
        btnConsultar.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.btnConsultar.text")); // NOI18N
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnFechasLayout = new javax.swing.GroupLayout(pnFechas);
        pnFechas.setLayout(pnFechasLayout);
        pnFechasLayout.setHorizontalGroup(
            pnFechasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFechasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dpDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(dpHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158)
                .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );
        pnFechasLayout.setVerticalGroup(
            pnFechasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFechasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnFechasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(dpDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dpHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnFechasLayout.createSequentialGroup()
                .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel4.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jLabel4.text")); // NOI18N

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/accept.png"))); // NOI18N
        jButton3.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/save.png"))); // NOI18N
        jButton2.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnFechas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfTotal, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(pnFechas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        pnCliente1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.pnCliente1.border.title"))); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jLabel5.text")); // NOI18N

        ftfDocumentoSaldo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("########"))));
        ftfDocumentoSaldo.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.ftfDocumentoSaldo.text")); // NOI18N
        ftfDocumentoSaldo.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        ftfDocumentoSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftfDocumentoSaldoActionPerformed(evt);
            }
        });

        btnBuscarClienteSaldo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar2.png"))); // NOI18N
        btnBuscarClienteSaldo.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.btnBuscarClienteSaldo.text")); // NOI18N
        btnBuscarClienteSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteSaldoActionPerformed(evt);
            }
        });

        tfClienteSaldo.setText(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.tfClienteSaldo.text")); // NOI18N

        javax.swing.GroupLayout pnCliente1Layout = new javax.swing.GroupLayout(pnCliente1);
        pnCliente1.setLayout(pnCliente1Layout);
        pnCliente1Layout.setHorizontalGroup(
            pnCliente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCliente1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnCliente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfClienteSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnCliente1Layout.createSequentialGroup()
                        .addComponent(ftfDocumentoSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarClienteSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnCliente1Layout.setVerticalGroup(
            pnCliente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCliente1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnCliente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscarClienteSaldo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnCliente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ftfDocumentoSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfClienteSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tbSaldosClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbSaldosClientes);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
                    .addComponent(pnCliente1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(42, 42, 42))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnCliente1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(DiagCuentasCorrientes.class, "DiagCuentasCorrientes.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCobranzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCobranzaActionPerformed
        altaCobranza();
        inicializarComponentes();
        seleccionarCliente();
    }//GEN-LAST:event_btnCobranzaActionPerformed

    private void rbFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFechaActionPerformed
        if (rbFecha.isSelected()) {
            Comunes.activarComponentesPanel(pnFechas);
            limpiar();
        } else {
            Comunes.desactivarComponentesPanel(pnFechas);
            limpiar();
        }
        if (rbCliente.isSelected()) {
            Comunes.activarComponentesPanel(pnCliente);
            limpiar();
        } else {
            Comunes.desactivarComponentesPanel(pnCliente);
            limpiar();
        }

    }//GEN-LAST:event_rbFechaActionPerformed

    private void rbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbClienteActionPerformed
        if (rbCliente.isSelected()) {
            Comunes.activarComponentesPanel(pnCliente);
            limpiar();
        } else {
            Comunes.desactivarComponentesPanel(pnCliente);
            limpiar();
        }
        if (rbFecha.isSelected()) {
            Comunes.activarComponentesPanel(pnFechas);
            limpiar();
        } else {
            Comunes.desactivarComponentesPanel(pnFechas);
            limpiar();
        }

    }//GEN-LAST:event_rbClienteActionPerformed

    private void cbCobranzasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCobranzasActionPerformed
        seleccionMultiple();
    }//GEN-LAST:event_cbCobranzasActionPerformed

    private void cbVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVentasActionPerformed
        seleccionMultiple();
    }//GEN-LAST:event_cbVentasActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        ListarTodasVentasCobranzas();
        btnCobranza.setEnabled(false);
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        borrarCobranza();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteActionPerformed
        // TODO add your handling code here:
        buscarClientePorDNI();
    }//GEN-LAST:event_btnBuscarClienteActionPerformed

    private void ftfDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftfDocumentoActionPerformed
        tfCliente.setText("");
        buscarClientePorDNI();


    }//GEN-LAST:event_ftfDocumentoActionPerformed

    private void ftfDocumentoSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftfDocumentoSaldoActionPerformed
        // TODO add your handling code here:
        tfClienteSaldo.setText("");
        buscarClientePorDNISaldo();
        ftfDocumentoSaldo.selectAll();
    }//GEN-LAST:event_ftfDocumentoSaldoActionPerformed

    private void btnBuscarClienteSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteSaldoActionPerformed
        // TODO add your handling code here:
        tfClienteSaldo.setText("");
        buscarClientePorDNISaldo();
    }//GEN-LAST:event_btnBuscarClienteSaldoActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        aceptar();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        exportarCuentaCorriente();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagCuentasCorrientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagCuentasCorrientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagCuentasCorrientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagCuentasCorrientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiagCuentasCorrientes dialog = new DiagCuentasCorrientes(new javax.swing.JFrame(), true, new Usuario(), new Sucursal());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.action.ActionContainerFactory actionContainerFactory1;
    private javax.swing.JButton btnBuscarCliente;
    private javax.swing.JButton btnBuscarClienteSaldo;
    private javax.swing.JButton btnCobranza;
    private javax.swing.JButton btnConsultar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbCobranzas;
    private javax.swing.JCheckBox cbVentas;
    private org.jdesktop.swingx.JXDatePicker dpDesde;
    private org.jdesktop.swingx.JXDatePicker dpHasta;
    private javax.swing.JFormattedTextField ftfDocumento;
    private javax.swing.JFormattedTextField ftfDocumentoSaldo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnCliente;
    private javax.swing.JPanel pnCliente1;
    private javax.swing.JPanel pnFechas;
    private javax.swing.JRadioButton rbCliente;
    private javax.swing.JRadioButton rbFecha;
    private javax.swing.JTable tbSaldosClientes;
    private javax.swing.JTable tbVentaCobranza;
    private javax.swing.JTextField tfCliente;
    private javax.swing.JTextField tfClienteSaldo;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables

    private void inicializarComponentes() {
        tfCliente.setEditable(false);
        tfClienteSaldo.setEditable(false);
        rbCliente.setSelected(true);
        rbFecha.setSelected(false);
        cbCobranzas.setSelected(true);
        cbVentas.setSelected(true);
        Comunes.activarComponentesPanel(pnCliente);
        Comunes.desactivarComponentesPanel(pnFechas);
        cargarComboClientes();
        cargarTablaSaldos();
        //cargarVentaCobranza();
    }

    private void cargarTablaVentaCobranza(List<VentaCobranza> listaVC) {
        modeloTablaVentaCobranza = new ModeloTablaNoEditable();
        cargarEncabezadosTablaVentaCobranza(modeloTablaVentaCobranza);
        configurarTabla(tbVentaCobranza);
        try {
            cargarVentaCobranza(listaVC);
        } catch (Exception ex) {
            Logger.getLogger(DiagCobroTicket2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void configurarTabla(JTable tbl) {
        JViewport scroll = (JViewport) tbl.getParent();
        int ancho = scroll.getWidth();
        int anchoColumna = 0;
        TableColumnModel modeloColumna = tbl.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (1 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    anchoColumna = (5 * ancho) / 100;
                    break;
            }
            columnaTabla.setPreferredWidth(anchoColumna);
            tbl.setColumnModel(modeloColumna);
        }
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
        tbl.getTableHeader().setBackground(java.awt.Color.WHITE);
        tbl.getTableHeader().setForeground(Color.BLACK);
        //Si le queremos cambiar el tamaño a la tablita
        tbl.setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
    }

    private void cargarEncabezadosTablaSaldos(ModeloTablaNoEditable editable) {
        editable.addColumn("Cliente");
        editable.addColumn("Saldo");
        tbSaldosClientes.setModel(editable);
    }

    private void cargarEncabezadosTablaVentaCobranza(ModeloTablaNoEditable modeloTablaVentaCobranza) {

        modeloTablaVentaCobranza.addColumn("Object");
        modeloTablaVentaCobranza.addColumn("Cliente");
        modeloTablaVentaCobranza.addColumn("Tipo Op");
        modeloTablaVentaCobranza.addColumn("Fecha");
        modeloTablaVentaCobranza.addColumn("Importe");
        // hugo modeloTablaVentaCobranza.addColumn("Saldo");
        //   modeloTablaVentaCobranza.addColumn("SaldoAcumulado");
        modeloTablaVentaCobranza.addColumn("Nro Ticket/Recibo");
        modeloTablaVentaCobranza.addColumn("Observaciones");
        tbVentaCobranza.setModel(modeloTablaVentaCobranza);
    }

    private void cargarVentaCobranza(List<VentaCobranza> listaVC) {

        try {
            modeloTablaVentaCobranza = new ModeloTablaNoEditable();
            cargarEncabezadosTablaVentaCobranza(modeloTablaVentaCobranza);
            for (VentaCobranza ventaCobranza : listaVC) {
                cargarVC(ventaCobranza);
            }

            tbVentaCobranza.setModel(modeloTablaVentaCobranza);
            Comunes.setOcultarColumnasJTable(tbVentaCobranza, 0);
        } catch (Exception ex) {
            Logger.getLogger(DiagSueldosAdelantos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarSaldo(List<Object[]> lista) {

        try {
            modeloTablaSaldos = new ModeloTablaNoEditable();
            cargarEncabezadosTablaSaldos(modeloTablaSaldos);
            for (Object[] objects : lista) {
                cargarSaldo(objects);
            }

            tbSaldosClientes.setModel(modeloTablaSaldos);
            //Comunes.setOcultarColumnasJTable(tblTickets, 0);
        } catch (Exception ex) {
            Logger.getLogger(DiagSueldosAdelantos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarVC(VentaCobranza ventaCobranza) {
        Object[] fila = new Object[7];
        fila[0] = ventaCobranza.getObjeto();
        fila[1] = ventaCobranza.getNombreCliente();
        fila[2] = ventaCobranza.getTipo();
        fila[3] = new SimpleDateFormat("dd/MM/YYYY HH:mm").format(ventaCobranza.getFecha());
        fila[4] = ventaCobranza.getImporte();
// hugo        fila[5] = ventaCobranza.getImporteSaldo();
//       fila[6] = ventaCobranza.getSaldoAcumulado();
        fila[5] = ventaCobranza.getNumero();
        fila[6] = ventaCobranza.getObservaciones();
        modeloTablaVentaCobranza.addRow(fila);
    }

    private void cargarSaldo(Object[] objects) {
        Object[] fila = new Object[2];
        //calculo los pagos realizados por el cliente y se los resto al total de la cuenta corriente
        try {
//            BigDecimal saldoCobranzas = MovimientoCajaFacade.getInstance().getSaldoCobranzas((Cliente) objects[1]);
//            fila[1] = ((BigDecimal) objects[0]).subtract(saldoCobranzas);
            fila[1] = ((BigDecimal) objects[0]);
        } catch (Exception e) {
        }
        fila[0] = objects[1];

        modeloTablaSaldos.addRow(fila);
    }

    private void cargarComboClientes() {
        //Se modifica para agregar todos los clientes
        listaClientes = ClienteFacade.getInstance().getTodos();
        //listaClientes = CuentaCorrienteFacade.getInstance().getClientesCuentasCorrientes();
//        Comunes.cargarJComboConBlanco(cbCliente, listaClientes);
//        Comunes.cargarJComboConBlanco(cbClienteSaldo, listaClientes);
        //AGREGAMOS AUTOCOMPLETAR COMOBOBOX

        //cliente = (Cliente) cbCliente.getSelectedItem();
    }

    private void cargarVentaCobranza() {
        try {
            if (cliente != null) {
                saldoTotal = new BigDecimal("0.00");
                listaVentaCobranza = new ArrayList<>();
                List<CuentaCorriente> listaCuentaCorriente = new ArrayList<>();
                listaCuentaCorriente = CuentaCorrienteFacade.getInstance().getCuentasCCliente(cliente);
                if (listaCuentaCorriente != null) {
                    for (CuentaCorriente cc : listaCuentaCorriente) {
                        //  if (cc.getSaldo().doubleValue() != 0) {
                        VentaCobranza vc = new VentaCobranza();
                        vc.setObjeto(cc);
                        vc.setTipo("Venta CC");
                        vc.setNombreCliente(cc.getCliente().toString());
                        vc.setFecha(cc.getFecha());
                        vc.setImporte(cc.getImporteCtaCte());
                        vc.setImporteSaldo(cc.getSaldo());
                        vc.setNumero(cc.getVenta().getNumeroTicket());
                        vc.setObservaciones(cc.getObservaciones());
                        listaVentaCobranza.add(vc);
                        //   }
                    }
                }
                //Aca va la lista de Cobranzactacte 
                List<CobranzaCtaCte> listaCobranzaCtaCte = new ArrayList<>();
                listaCobranzaCtaCte = MovimientoCajaFacade.getInstance().getCobranzas(cliente);
                if (listaCobranzaCtaCte != null) {
                    for (CobranzaCtaCte ccc : listaCobranzaCtaCte) {
                        //if (ccc.getSaldoCobranza().doubleValue() != 0) {
                        VentaCobranza vc = new VentaCobranza();
                        vc.setObjeto(ccc);
                        vc.setTipo("Cobranza");
                        vc.setNombreCliente(ccc.getCliente().toString());
                        vc.setFecha(ccc.getFecha());
                        vc.setImporte(ccc.getImporte());
                        vc.setImporteSaldo(ccc.getSaldoCobranza());
                        vc.setNumero(ccc.getNumero());
                        vc.setObservaciones(ccc.getObservaciones());
                        listaVentaCobranza.add(vc);
                        // }
                    }

                }

                Collections.sort(listaVentaCobranza, new VentaCobranza());

                calcularSadoTotal();
                //deshabilito o habilito el boton dependiendo de los resultados
                btnCobranza.setEnabled(!listaVentaCobranza.isEmpty());
                String mensaje = cliente != null ? "No existen cuentas corrientes: Cliente: "
                        + cliente : "No existen cuentas corrientes";
                if (cliente != null) {
                    if (listaVentaCobranza.isEmpty()) {
                        JOptionPane.showMessageDialog(pnCliente, mensaje);
                        ftfDocumento.setText("");
                        tfCliente.setText("");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }

    private void cargarVentaCobranzaConFechas() {
        try {
            saldoTotal = new BigDecimal("0.00");
            //cliente = (Cliente) cbCliente.getSelectedItem();
            listaVentaCobranza = new ArrayList<>();
            List<CuentaCorriente> listaCuentaCorriente = new ArrayList<>();
            listaCuentaCorriente = CuentaCorrienteFacade.getInstance().getCuentasCCliente(cliente, dpDesde.getDate(), dpHasta.getDate());
            if (listaCuentaCorriente != null) {
                for (CuentaCorriente cc : listaCuentaCorriente) {
                    //  if (cc.getSaldo().doubleValue() != 0) {
                    VentaCobranza vc = new VentaCobranza();
                    vc.setObjeto(cc);
                    vc.setTipo("Venta CC");
                    vc.setNombreCliente(cc.getCliente().toString());
                    vc.setFecha(cc.getFecha());
                    vc.setImporte(cc.getImporteCtaCte());
                    vc.setImporteSaldo(cc.getSaldo());
                    vc.setNumero(cc.getVenta().getNumeroTicket());
                    vc.setObservaciones(cc.getObservaciones());
                    listaVentaCobranza.add(vc);
                    //   }
                }
            }
            //Aca va la lista de Cobranzactacte 
            List<CobranzaCtaCte> listaCobranzaCtaCte = new ArrayList<>();
            listaCobranzaCtaCte = MovimientoCajaFacade.getInstance().getCobranzas(cliente);
            if (listaCobranzaCtaCte != null) {
                for (CobranzaCtaCte ccc : listaCobranzaCtaCte) {
                    //if (ccc.getSaldoCobranza().doubleValue() != 0) {
                    VentaCobranza vc = new VentaCobranza();
                    vc.setObjeto(ccc);
                    vc.setTipo("Cobranza");
                    vc.setFecha(ccc.getFecha());
                    vc.setImporte(ccc.getImporte());
                    vc.setImporteSaldo(ccc.getSaldoCobranza());
                    vc.setNumero(ccc.getNumero());
                    vc.setObservaciones(ccc.getObservaciones());
                    listaVentaCobranza.add(vc);
                    // }
                }

            }

            Collections.sort(listaVentaCobranza, new VentaCobranza());

            calcularSadoTotal();
            //deshabilito o habilito el boton dependiendo de los resultados
            btnCobranza.setEnabled(!listaVentaCobranza.isEmpty());
            if (listaVentaCobranza.isEmpty()) {
                JOptionPane.showMessageDialog(pnCliente,
                        "No existen cuentas corrientes: Cliente: "
                        + cliente
                        + " Desde: "
                        + dateFormat.format(dpDesde.getDate()) + " Hasta: "
                        + dateFormat.format(dpHasta.getDate()));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }

    private void cargarVentasConFecha() {
        try {
            saldoTotal = new BigDecimal("0.00");

            listaVentaCobranza = new ArrayList<>();
            List<CuentaCorriente> listaCuentaCorriente = new ArrayList<>();
            listaCuentaCorriente = CuentaCorrienteFacade.getInstance().getCuentasCCliente(cliente, dpDesde.getDate(), dpHasta.getDate());
            if (listaCuentaCorriente != null) {
                for (CuentaCorriente cc : listaCuentaCorriente) {
                    //  if (cc.getSaldo().doubleValue() != 0) {
                    VentaCobranza vc = new VentaCobranza();
                    vc.setObjeto(cc);
                    vc.setTipo("Venta CC");
                    vc.setFecha(cc.getFecha());
                    vc.setImporte(cc.getImporteCtaCte());
                    vc.setImporteSaldo(cc.getSaldo());
                    vc.setNumero(cc.getVenta().getNumeroTicket());
                    vc.setObservaciones(cc.getObservaciones());
                    listaVentaCobranza.add(vc);
                    //   }
                }
            }

            Collections.sort(listaVentaCobranza, new VentaCobranza());

            calcularSadoTotal();
//deshabilito o habilito el boton dependiendo de los resultados
            btnCobranza.setEnabled(!listaVentaCobranza.isEmpty());
            if (listaVentaCobranza.isEmpty()) {
                JOptionPane.showMessageDialog(pnCliente,
                        "No existen cuentas corrientes: Cliente: "
                        + cliente
                        + " Desde: "
                        + dateFormat.format(dpDesde.getDate()) + " Hasta: "
                        + dateFormat.format(dpHasta.getDate()));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }

    private void cargarCobranzasConFecha() {
        try {
            saldoTotal = new BigDecimal("0.00");
            listaVentaCobranza = new ArrayList<>();
            //Aca va la lista de Cobranzactacte 
            List<CobranzaCtaCte> listaCobranzaCtaCte = new ArrayList<>();
            listaCobranzaCtaCte = MovimientoCajaFacade.getInstance().getCobranzas(cliente);
            if (listaCobranzaCtaCte != null) {
                for (CobranzaCtaCte ccc : listaCobranzaCtaCte) {
                    //if (ccc.getSaldoCobranza().doubleValue() != 0) {
                    VentaCobranza vc = new VentaCobranza();
                    vc.setObjeto(ccc);
                    vc.setTipo("Cobranza");
                    vc.setFecha(ccc.getFecha());
                    vc.setImporte(ccc.getImporte());
                    vc.setImporteSaldo(ccc.getSaldoCobranza());
                    vc.setNumero(ccc.getNumero());
                    vc.setObservaciones(ccc.getObservaciones());
                    listaVentaCobranza.add(vc);
                    // }
                }

            }

            Collections.sort(listaVentaCobranza, new VentaCobranza());

            calcularSadoTotal();
            //deshabilito o habilito el boton dependiendo de los resultados
            btnCobranza.setEnabled(!listaVentaCobranza.isEmpty());
            if (listaVentaCobranza.isEmpty()) {
                JOptionPane.showMessageDialog(pnCliente,
                        "No existen cuentas corrientes: Cliente: "
                        + cliente
                        + " Desde: "
                        + dateFormat.format(dpDesde.getDate()) + " Hasta: "
                        + dateFormat.format(dpHasta.getDate()));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }

    private void altaCobranza() {
        if (cliente != null) {
            DiagAltaCobranza diagAlta = new DiagAltaCobranza(null, true, "Alta", cliente, usuario, sucursal);
            diagAlta.setLocation(Comunes.centrarDialog(diagAlta));
            diagAlta.setVisible(true);

            inicializarComponentes();
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente para realizar una cobranza");
        }

    }

    private void cargarSoloVentasXCliente() {
        try {
            saldoTotal = new BigDecimal("0.00");
            listaVentaCobranza = new ArrayList<>();
            List<CuentaCorriente> listaCuentaCorriente = CuentaCorrienteFacade.getInstance().getCuentasCCliente(cliente);
            if (listaCuentaCorriente != null) {
                for (CuentaCorriente cc : listaCuentaCorriente) {
                    //  if (cc.getSaldo().doubleValue() != 0) {
                    VentaCobranza vc = new VentaCobranza();
                    vc.setObjeto(cc);
                    vc.setTipo("Venta CC");
                    vc.setNombreCliente(cc.getCliente().toString());
                    vc.setFecha(cc.getFecha());
                    vc.setImporte(cc.getImporteCtaCte());
                    vc.setImporteSaldo(cc.getSaldo());
                    vc.setNumero(cc.getVenta().getNumeroTicket());
                    vc.setObservaciones(cc.getObservaciones());
                    listaVentaCobranza.add(vc);
                    //   }
                }
            }

            Collections.sort(listaVentaCobranza, new VentaCobranza());

            calcularSadoTotal();
            //deshabilito o habilito el boton dependiendo de los resultados
            btnCobranza.setEnabled(!listaVentaCobranza.isEmpty());
            if (listaVentaCobranza.isEmpty()) {
                JOptionPane.showMessageDialog(pnCliente,
                        "No existen cuentas corrientes: Cliente: "
                        + cliente);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }

    private void cargarSoloCobranzasXCliente() {
        try {
            saldoTotal = new BigDecimal("0.00");
            listaVentaCobranza = new ArrayList<>();
            //Aca va la lista de Cobranzactacte faltan los atributos a la entidad
            List<CobranzaCtaCte> listaCobranzaCtaCte = MovimientoCajaFacade.getInstance().getCobranzas(cliente);
            if (listaCobranzaCtaCte != null) {
                for (CobranzaCtaCte ccc : listaCobranzaCtaCte) {
                    //if (ccc.getSaldoCobranza().doubleValue() != 0) {
                    VentaCobranza vc = new VentaCobranza();
                    vc.setObjeto(ccc);
                    vc.setTipo("Cobranza");
                    vc.setNombreCliente(ccc.getCliente().toString());
                    vc.setFecha(ccc.getFecha());
                    vc.setImporte(ccc.getImporte());
                    vc.setImporteSaldo(ccc.getSaldoCobranza());
                    vc.setNumero(ccc.getNumero());
                    vc.setObservaciones(ccc.getObservaciones());
                    listaVentaCobranza.add(vc);
                    // }
                }

            }

            Collections.sort(listaVentaCobranza, new VentaCobranza());

            calcularSadoTotal();
            //deshabilito o habilito el boton dependiendo de los resultados
            btnCobranza.setEnabled(!listaVentaCobranza.isEmpty());
            if (listaVentaCobranza.isEmpty()) {
                JOptionPane.showMessageDialog(pnCliente,
                        "No existen cuentas corrientes: Cliente: "
                        + cliente);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }

    private void seleccionMultiple() {

        if (rbCliente.isSelected() && !rbFecha.isSelected() && cliente != null) {
            //JOptionPane.showMessageDialog(null, "cliente seleccionado");

            if (cbCobranzas.isSelected() && cbVentas.isSelected()) {
                cargarVentaCobranza();
            }
            if (cbVentas.isSelected() && !cbCobranzas.isSelected()) {
                cargarSoloVentasXCliente();
            }
            if (cbCobranzas.isSelected() && !cbVentas.isSelected()) {
                cargarSoloCobranzasXCliente();
            }

        } else if (rbFecha.isSelected() && !rbCliente.isSelected()) {
            ListarTodasVentasCobranzas();
            //JOptionPane.showMessageDialog(null, "fecha seleccionada");
        }
    }

    private void calcularSadoTotal() {
        for (VentaCobranza vc : listaVentaCobranza) {
            if (vc.getTipo().equals("Venta CC")) {
                saldoTotal = saldoTotal.add(vc.getImporte());
                vc.setSaldoAcumulado(saldoTotal);
            }

            if (vc.getTipo().equals("Cobranza")) {
                saldoTotal = saldoTotal.subtract(vc.getImporte());
                vc.setSaldoAcumulado(saldoTotal);
            }

        }
        cargarTablaVentaCobranza(listaVentaCobranza);
        tfTotal.setText(saldoTotal.toString());
        //deshabilito o habilito el boton dependiendo de los resultados
        btnCobranza.setEnabled(!listaVentaCobranza.isEmpty());
    }

    private void ListarTodasVentasCobranzas() {
        try {
            saldoTotal = new BigDecimal("0.00");
            listaVentaCobranza = new ArrayList<>();
            if (cbVentas.isSelected()) {
                List<CuentaCorriente> listaCuentaCorriente = new ArrayList<>();
                listaCuentaCorriente = CuentaCorrienteFacade.getInstance().getCuentasCCFechas(dpDesde.getDate(), dpHasta.getDate());
                if (listaCuentaCorriente != null) {
                    for (CuentaCorriente cc : listaCuentaCorriente) {
                        //  if (cc.getSaldo().doubleValue() != 0) {
                        VentaCobranza vc = new VentaCobranza();
                        vc.setObjeto(cc);
                        vc.setTipo("Venta CC");
                        vc.setNombreCliente(cc.getCliente().toString());
                        vc.setFecha(cc.getFecha());
                        vc.setImporte(cc.getImporteCtaCte());
                        vc.setImporteSaldo(cc.getSaldo());
                        vc.setNumero(cc.getVenta().getNumeroTicket());
                        vc.setObservaciones(cc.getObservaciones());
                        //Franquito: aca hacer vc.setObjeto(cc); // hacer eso en todas las listas que cargan la tabla
                        listaVentaCobranza.add(vc);
                        //   }
                    }
                }
            }
            if (cbCobranzas.isSelected()) {
                //Aca va la lista de Cobranzactacte 
                List<CobranzaCtaCte> listaCobranzaCtaCte = new ArrayList<>();
                listaCobranzaCtaCte = MovimientoCajaFacade.getInstance().getCobranzasSegunFecha(dpDesde.getDate(), dpHasta.getDate());
                if (listaCobranzaCtaCte != null) {
                    for (CobranzaCtaCte ccc : listaCobranzaCtaCte) {
                        //if (ccc.getSaldoCobranza().doubleValue() != 0) {
                        VentaCobranza vc = new VentaCobranza();
                        vc.setObjeto(ccc);
                        vc.setTipo("Cobranza");
                        vc.setNombreCliente(ccc.getCliente().toString());
                        vc.setFecha(ccc.getFecha());
                        vc.setImporte(ccc.getImporte());
                        vc.setImporteSaldo(ccc.getSaldoCobranza());
                        vc.setNumero(ccc.getNumero());
                        vc.setObservaciones(ccc.getObservaciones());
                        //Franquito: aca hacer vc.setObjeto(cc); // hacer eso en todas las listas que cargan la tabla
                        listaVentaCobranza.add(vc);
                        // }
                    }

                }
            }
            Collections.sort(listaVentaCobranza, new VentaCobranza());

            calcularSadoTotal();
            //deshabilito o habilito el boton dependiendo de los resultados
            btnCobranza.setEnabled(!listaVentaCobranza.isEmpty());
            if (listaVentaCobranza.isEmpty()) {
                JOptionPane.showMessageDialog(pnCliente,
                        "No existen cuentas corrientes: Desde: "
                        + dateFormat.format(dpDesde.getDate()) + "  Hasta: "
                        + dateFormat.format(dpHasta.getDate()));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e);
        }
    }

    private void borrarCobranza() {
        //Franquito: Aca recuperar la posicion  de la tabla, y sacar de la lista ventacobranza en la misma posicion el objeto (getObjeto)
        //si es cobranza (getClass.getSipleName == "Cobranza" o con instance of, )  preguntar si desea borrar si quiere borrar la cobranza
        //validar que no hay sido cerrada dicha cobranza
        //en caso afirmativo borrar de la lista, actualizar la tabla, y actualizar el saldo si es necesario, en caso de que no no hacer nada,
        //en caso de q no sea clase cobranza avisar "No es una cobranza, solo se pueden borrar cobranzas no cerradas)
        if (tbVentaCobranza.getSelectedRow() != -1) {
            int i = JOptionPane.showConfirmDialog(this, "¿Desea eliminar el Registro seleccionado?", "Confirmar eliminacion", JOptionPane.YES_NO_OPTION);
            if (i == 0) {
                Object o = (Object) tbVentaCobranza.getValueAt(tbVentaCobranza.getSelectedRow(), 0);
                System.out.println("nombre clase: " + o.getClass().getSimpleName());
                if (o.getClass().getSimpleName().equals("CobranzaCtaCte")) {
                    if (!((CobranzaCtaCte) o).isCerrado()) {
                        try {
                            MovimientoCajaFacade.getInstance().eliminar(((CobranzaCtaCte) o).getId());
                            int filaSeleccionada = tbVentaCobranza.getSelectedRow();
                            listaVentaCobranza.remove(filaSeleccionada);
                            ((ModeloTablaNoEditable) tbVentaCobranza.getModel()).removeRow(filaSeleccionada);
                            BigDecimal montoCobranza = ((CobranzaCtaCte) o).getImporte();
                            reestablecerSaldos(montoCobranza);
                            inicializarComponentes();
                            seleccionarCliente();
                            JOptionPane.showMessageDialog(null, "Registro eliminado");
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "No se pudo borrar la caja");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede eliminar "
                                + "una cobranza que se haya cerrado con una caja");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No es una cobranza");
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un registro");
        }

    }

    private void cargarTablaSaldos() {
        List<Object[]> saldosClientes = CuentaCorrienteFacade.getInstance().getSaldosClientes();
        cargarSaldo(saldosClientes);
        ColorearTabla colorear = new ColorearTabla();
        tbVentaCobranza.setDefaultRenderer(Object.class, colorear);
    }

    private void cargarSaldosCliente() {

        if (clienteSaldo != null) {
            List<Object[]> saldosClientes = CuentaCorrienteFacade.getInstance().getSaldosClientes(clienteSaldo);
            cargarSaldo(saldosClientes);

        } else {
            cargarTablaSaldos();

        }
    }

    private void seleccionarCliente() {
        //SI CLIENTE Y FECHA ESTAN SELECCIONADOS
        if (cliente != null) {
            if (rbCliente.isSelected() && rbFecha.isSelected()) {
                if (cbCobranzas.isSelected() && cbVentas.isSelected()) {
                    cargarVentaCobranzaConFechas();
                }
                if (cbVentas.isSelected() && !cbCobranzas.isSelected()) {
                    cargarSoloVentasXCliente();
                }
                if (cbCobranzas.isSelected() && !cbVentas.isSelected()) {
                    cargarSoloCobranzasXCliente();
                }

            }
            //SI SOLO EL CLIENTE ESTA SELECCIONADO
            if (rbCliente.isSelected() && !rbFecha.isSelected()) {
                if (cbCobranzas.isSelected() && cbVentas.isSelected()) {
                    cargarVentaCobranza();
                }
                if (cbVentas.isSelected() && !cbCobranzas.isSelected()) {
                    cargarSoloVentasXCliente();
                }
                if (cbCobranzas.isSelected() && !cbVentas.isSelected()) {
                    cargarSoloCobranzasXCliente();
                }

            }
            //SI SOLO LA FECHA ESTA SELECCIONADA
            if (!rbCliente.isSelected() && rbFecha.isSelected()) {
            }
        } else if (cliente != null) {
            cliente = null;
            btnCobranza.setEnabled(false);
        }
    }

    private void buscarClientePorDNI() {
        cliente = null;
        if (!ftfDocumento.getText().isEmpty()) {
            cliente = ClienteFacade.getInstance().getPersonaXDni(ftfDocumento.getText());
            if (cliente != null) {
                ftfDocumento.setText(((Persona) cliente).getDocumentoIdentidad().getNumero());
                tfCliente.setText(cliente.toString());
                seleccionarCliente();

            } else {
                buscarCliente();

            }
        } else {
            buscarCliente();
        }

    }

    private void buscarCliente() {

        DiagBuscarCliente diagBuscarCliente = new DiagBuscarCliente(null, true);
        diagBuscarCliente.setLocation(Comunes.centrarDialog(diagBuscarCliente));
        diagBuscarCliente.setVisible(true);
        if (diagBuscarCliente.getCliente() != null) {
            cliente = diagBuscarCliente.getCliente();
            if (cliente.getClass() == Persona.class) {
                try {
                    ftfDocumento.setText(((Persona) cliente).getDocumentoIdentidad().getNumero());
                } catch (Exception e) {

                }

            } else {
                try {
                    ftfDocumento.setText(((Organismo) cliente).getCUIT());
                } catch (Exception e) {

                }
            }
            tfCliente.setText(cliente.toString());
            seleccionarCliente();

        } else if (diagBuscarCliente.getCliente() != null) {
            cliente = diagBuscarCliente.getCliente();
            tfCliente.setText(cliente.toString());
            btnCobranza.requestFocus();
        }

    }

    private void buscarClientePorDNISaldo() {
        clienteSaldo = ClienteFacade.getInstance().getPersonaXDni(ftfDocumentoSaldo.getText());
        if (clienteSaldo != null) {
            ftfDocumentoSaldo.setText(((Persona) clienteSaldo).getDocumentoIdentidad().getNumero());
            tfClienteSaldo.setText(clienteSaldo.toString());
            cargarSaldosCliente();
        } else {
            buscarClienteSaldo();

        }

    }

    private void buscarClienteSaldo() {

        DiagBuscarCliente diagBuscarCliente = new DiagBuscarCliente(null, true);
        diagBuscarCliente.setLocation(Comunes.centrarDialog(diagBuscarCliente));
        diagBuscarCliente.setVisible(true);
        if (diagBuscarCliente.getCliente() != null) {
            clienteSaldo = diagBuscarCliente.getCliente();
            if (clienteSaldo.getClass() == Persona.class) {
                try {
                    ftfDocumentoSaldo.setText(((Persona) clienteSaldo).getDocumentoIdentidad().getNumero());
                } catch (Exception e) {

                }

            } else {
                try {
                    ftfDocumentoSaldo.setText(((Organismo) clienteSaldo).getCUIT());
                } catch (Exception e) {

                }
            }
            tfClienteSaldo.setText(clienteSaldo.toString());
            cargarSaldosCliente();

        } else if (diagBuscarCliente.getCliente() != null) {
            clienteSaldo = diagBuscarCliente.getCliente();
            tfClienteSaldo.setText(clienteSaldo.toString());

        }

    }

    private void limpiar() {
        cliente = null;
        ftfDocumento.setText("");
        tfCliente.setText("");
        dpDesde.setDate(new Date());
        dpHasta.setDate(new Date());
        modeloTablaVentaCobranza = new ModeloTablaNoEditable();
        cargarEncabezadosTablaVentaCobranza(modeloTablaVentaCobranza);
        tfTotal.setText("");
    }

    private void reestablecerSaldos(BigDecimal montoCobranza) {

        try {
            //CARGA DEL OBJETO COBRANZA
            CobranzaCtaCte cobranza = new CobranzaCtaCte();
            //cobranza.setImporte(BigDecimal.valueOf(Double.valueOf(tfMonto.getText())));
            BigDecimal montoCobranzaTotal = new BigDecimal(BigInteger.ZERO);

            cobranza.setFecha(Comunes.obtenerFechaActualDesdeDB());
            cobranza.setCliente(cliente);
            cobranza.setImporte(BigDecimal.ZERO);
            cobranza.setNumero(0);
            cobranza.setUsuario(usuario);
            cobranza.setSucursal(sucursal);
            cobranza.setObservaciones("Cobranza Eliminada");
            //JOptionPane.showMessageDialog(null, "montoCobranzaTotal :" + montoCobranzaTotal);
            //OBTENER LISTA DE LAS VENTAS CUENTA CORRIENTE ENTIDAD MOVIMIENTOCAJA_CUENTA CORRIENTE
            List<CuentaCorriente> listaVentasCuentaCorriente = CuentaCorrienteFacade.getInstance().getCuentasCCliente(cliente);
            //System.out.println("lista venta CC con saldo"+listaVentasCuentaCorriente);
            //OBTENER LISTA COBRANZAS
            List<CobranzaCtaCte> listaCobranzaCtaCte = MovimientoCajaFacade.getInstance().getCobranzas(cliente);
            //System.out.println("lista cobranza saldo segun cliente" + listaCobranzaCtaCte);

            for (CobranzaCtaCte ccc : listaCobranzaCtaCte) {
                montoCobranzaTotal = montoCobranzaTotal.add(ccc.getImporte());
                ccc.setSaldoCobranza(BigDecimal.valueOf(0.00));
                MovimientoCajaFacade.getInstance().modificar(ccc);
            }

            for (CuentaCorriente cc : listaVentasCuentaCorriente) {

                //create int object
                int res;

                res = montoCobranzaTotal.compareTo(cc.getImporteCtaCte()); // Comaparamos el acumulador totalCobranzaTotal con el saldo de la venta q se esta leyenedo

                //Cobranza total = importe de la cc
                if (res == 0) {
                    cc.setSaldo(new BigDecimal("0.00"));
                    montoCobranzaTotal = new BigDecimal("0.00");
                    CuentaCorrienteFacade.getInstance().modificar(cc);
                } //Cobranza total > importe de la cc 
                else if (res == 1) {
                    montoCobranzaTotal = montoCobranzaTotal.subtract(cc.getImporteCtaCte());
                    cc.setSaldo(new BigDecimal("0.00"));
                    CuentaCorrienteFacade.getInstance().modificar(cc);

                } //CObranza Total < importe de la cc
                else if (res == -1) {
                    cc.setSaldo(cc.getImporteCtaCte().subtract(montoCobranzaTotal));
                    montoCobranzaTotal = cc.getSaldo();
                    CuentaCorrienteFacade.getInstance().modificar(cc);

                }

            }
            cobranza.setSaldoCobranza(montoCobranzaTotal);
            //ALTA DE LA COBRANZA
            MovimientoCajaFacade.getInstance().alta(cobranza);

            JOptionPane.showMessageDialog(this, "Cobranza Eliminada y saldos actualizados!");
        } catch (Exception e) {
        }

    }

    private void aceptar() {
        this.dispose();
    }

    private void exportarCuentaCorriente() {
        if (tbVentaCobranza.getRowCount() > 0) {
            new ExportarExcel().crearExcelJtable(tbVentaCobranza, "Listado Cobranzas Cliente");
        } else {
            JOptionPane.showMessageDialog(null, "No se puede Exportar tabla vacia!");
        }

    }
}
