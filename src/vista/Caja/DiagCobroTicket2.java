/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.Caja;

import Recursos.Soap;
import entidades.Sucursal;
import entidades.caja.Caja;
import entidades.caja.CobroVenta;
import entidades.caja.CuentaCorriente;
import entidades.caja.CuponTarjeta;
import entidades.cliente.Cliente;
import entidades.cliente.Organismo;
import entidades.cliente.Persona;
import entidades.persona.Telefono;
import entidades.usuario.Usuario;
import entidades.venta.Venta;
import entidades.venta.VentaArticulo;
import facade.ClienteFacade;
import facade.MovimientoCajaFacade;
import facade.CuentaCorrienteFacade;
import facade.CuponTarjetaFacade;
import facade.VentaFacade;
import includes.Comunes;
import includes.ModeloTablaNoEditable;
import java.awt.Color;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author root
 */
public class DiagCobroTicket2 extends javax.swing.JDialog {

    private Usuario usuario;
    private KeyEventDispatcher keyDispaycher;
    private Sucursal sucursal;
    private ModeloTablaNoEditable modeloTablaTickets;
    private List<Venta> listaTickets;
    private Venta ticket;
    private BigDecimal monto = new BigDecimal("0.0");
    private BigDecimal montoEfectivo = new BigDecimal("0.0");
    private BigDecimal montoTarjetaVale = new BigDecimal("0.0");
    private BigDecimal montoCCorriente = new BigDecimal("0.0");

    private BigDecimal aPagarEfectivo = new BigDecimal("0.0");
    private BigDecimal aPagarTarjetaVale = new BigDecimal("0.0");
    private BigDecimal aPagarCCorriente = new BigDecimal("0.0");
    private BigDecimal importeTotal = new BigDecimal("0.0");
    private CobroVenta cobroVenta;
    private BigDecimal vuelto;
    private List<TipoPago> listaPagos = new ArrayList<>();
    private ModeloTablaNoEditable modeloTablaPagos;
    private BigDecimal saldo;
    //rivate BigDecimal aPagar;
    private BigDecimal subtotal = new BigDecimal("0.0");
    private CuentaCorriente cuentaCorriente = null;
    private boolean agregoPagoCuentaCorriente;
    List<VentaArticulo> listaArticulos = new ArrayList<>();
    List<CuponTarjeta> listaCuponesTarjeta = new ArrayList<>();
    private Caja caja;

    /**
     * Creates new form DiagCobroTicket
     *
     * @param parent
     * @param modal
     * @param usuario
     * @param sucursal
     * @param caja
     */
    public DiagCobroTicket2(java.awt.Frame parent, boolean modal, Usuario usuario, Sucursal sucursal, Caja caja) {
        super(parent, modal);
        initComponents();
        this.sucursal = sucursal;
        this.usuario = usuario;
        this.caja = caja;
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfCuentaCorriente1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPagos = new javax.swing.JTable();
        btnQuitar = new javax.swing.JButton();
        btnEfectivo = new javax.swing.JButton();
        btnTarjetaVale = new javax.swing.JButton();
        btnCuentaCorriente = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfNroTicket = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfClienteTicket = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfSaldo = new javax.swing.JTextField();
        btnCerrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnAceptar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTickets = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSeleccionarTicket = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        tfCuentaCorriente1.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.tfCuentaCorriente1.text")); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.jPanel1.border.title"))); // NOI18N

        tblPagos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tipo de Pago", "Monto"
            }
        ));
        jScrollPane2.setViewportView(tblPagos);

        btnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnQuitar.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.btnQuitar.text")); // NOI18N
        btnQuitar.setNextFocusableComponent(btnAceptar);
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        btnEfectivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnEfectivo.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.btnEfectivo.text")); // NOI18N
        btnEfectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEfectivoActionPerformed(evt);
            }
        });

        btnTarjetaVale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnTarjetaVale.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.btnTarjetaVale.text")); // NOI18N
        btnTarjetaVale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTarjetaValeActionPerformed(evt);
            }
        });

        btnCuentaCorriente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btnCuentaCorriente.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.text")); // NOI18N
        btnCuentaCorriente.setName(""); // NOI18N
        btnCuentaCorriente.setNextFocusableComponent(btnQuitar);
        btnCuentaCorriente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCuentaCorrienteActionPerformed(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.jLabel2.text")); // NOI18N

        tfTotal.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tfTotal.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.tfTotal.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.jLabel3.text")); // NOI18N

        tfNroTicket.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tfNroTicket.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.tfNroTicket.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.jLabel4.text")); // NOI18N

        tfClienteTicket.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tfClienteTicket.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.tfClienteTicket.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.jLabel5.text")); // NOI18N

        tfSaldo.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        tfSaldo.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.tfSaldo.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnEfectivo, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnTarjetaVale)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCuentaCorriente)
                                        .addGap(61, 61, 61)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(1, 1, 1)
                        .addComponent(tfNroTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfClienteTicket)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(21, 21, 21)))
                .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfNroTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(tfClienteTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEfectivo)
                    .addComponent(btnTarjetaVale)
                    .addComponent(btnCuentaCorriente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnQuitar)
                        .addGap(45, 45, 45)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/back.png"))); // NOI18N
        btnCerrar.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.btnCerrar.text")); // NOI18N
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btnCancelar.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.btnCancelar.text")); // NOI18N
        btnCancelar.setNextFocusableComponent(btnCerrar);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/aceptar.png"))); // NOI18N
        btnAceptar.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.btnAceptar.text")); // NOI18N
        btnAceptar.setNextFocusableComponent(btnCancelar);
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        tblTickets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTickets.setNextFocusableComponent(btnEfectivo);
        tblTickets.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTicketsMouseClicked(evt);
            }
        });
        tblTickets.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblTicketsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblTickets);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.jLabel1.text")); // NOI18N

        btnSeleccionarTicket.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/accept.png"))); // NOI18N
        btnSeleccionarTicket.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.btnSeleccionarTicket.text")); // NOI18N
        btnSeleccionarTicket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarTicketActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar2.png"))); // NOI18N
        jButton1.setText(org.openide.util.NbBundle.getMessage(DiagCobroTicket2.class, "DiagCobroTicket2.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 691, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSeleccionarTicket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30))))
            .addGroup(layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAceptar)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCerrar)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSeleccionarTicket)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
        KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(keyDispaycher);
        keyDispaycher = null;
        if (!listaCuponesTarjeta.isEmpty()) {
            for (CuponTarjeta cuponTarjeta : listaCuponesTarjeta) {
                CuponTarjetaFacade.getInstance().eliminar(cuponTarjeta.getId());
            }
        }

        this.dispose();

    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        // TODO add your handling code here:

        if (validar()) {
            //modificamos el monto de la cuenta corriente en caso de
            //que exista un pago de este tipo

            if (cuentaCorriente != null) {
                CuentaCorrienteFacade.getInstance().alta(cuentaCorriente);
            }

            listaCuponesTarjeta = new ArrayList<>();

            cobroVenta = new CobroVenta();
            cobroVenta.setImporte(aPagarEfectivo);
            cobroVenta.setVenta(ticket);
            cobroVenta.setUsuario(usuario);
            cobroVenta.setFecha(Comunes.obtenerFechaActualDesdeDB());
            cobroVenta.setSucursal(sucursal);
            MovimientoCajaFacade.getInstance().alta(cobroVenta);

            //CONSUMIMOS WEB SERVICE 
            if (ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente()).isFidelizado()) {
                enviarVentaSOAP(cobroVenta);
            }else{
                System.out.println("no entra al web service");
            }
            ticket.setCobroVenta(cobroVenta);
            VentaFacade.getInstance().modificar(ticket);
            JOptionPane.showMessageDialog(rootPane, "¡Cobro realizado!", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
            reiniciarCobroTicket();
            ActualizarTickets();
        }


    }//GEN-LAST:event_btnAceptarActionPerformed

    private void tblTicketsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTicketsMouseClicked
        if (evt.getClickCount() == 2) {
            cobrarTicket();
        }
    }//GEN-LAST:event_tblTicketsMouseClicked

    private void tblTicketsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblTicketsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cobrarTicket();
        }
    }//GEN-LAST:event_tblTicketsKeyPressed

    private void btnSeleccionarTicketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarTicketActionPerformed
        seleccionarTicket();
    }//GEN-LAST:event_btnSeleccionarTicketActionPerformed

    private void btnEfectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEfectivoActionPerformed
        // TODO add your handling code here:
        agregarPagoEfectivo();

    }//GEN-LAST:event_btnEfectivoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        reiniciarCobroTicket();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        // TODO add your handling code here:
        quitarPago();

    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnTarjetaValeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTarjetaValeActionPerformed
        // TODO add your handling code here:
        agregarPagoTarjeta();

    }//GEN-LAST:event_btnTarjetaValeActionPerformed

    private void btnCuentaCorrienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCuentaCorrienteActionPerformed
        // TODO add your handling code here:
        agregarPagoCuentaCorriente();

    }//GEN-LAST:event_btnCuentaCorrienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        verDetalleTicket();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagCobroTicket2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagCobroTicket2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagCobroTicket2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagCobroTicket2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiagCobroTicket2 dialog = new DiagCobroTicket2(new javax.swing.JFrame(), true, new Usuario(), new Sucursal(), new Caja());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnCuentaCorriente;
    private javax.swing.JButton btnEfectivo;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnSeleccionarTicket;
    private javax.swing.JButton btnTarjetaVale;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblPagos;
    private javax.swing.JTable tblTickets;
    private javax.swing.JTextField tfClienteTicket;
    private javax.swing.JTextField tfCuentaCorriente1;
    private javax.swing.JTextField tfNroTicket;
    private javax.swing.JTextField tfSaldo;
    private javax.swing.JTextField tfTotal;
    // End of variables declaration//GEN-END:variables

    private void inicializarComponentes() {
        saldo = null;
        agregoPagoCuentaCorriente = false;
        tfNroTicket.setEditable(false);
        tfClienteTicket.setEditable(false);
        tfTotal.setEditable(false);
//        tfApagarEfectivo.setEditable(false);
        tfSaldo.setEditable(false);
        this.setTitle("Cobro de Tickets : " + usuario);
        eventosDeTeclas();
        ActualizarTickets();
        modeloTablaPagos = new ModeloTablaNoEditable();
        cargarEncabezadosTablaPagos(modeloTablaPagos);

    }

    private void eventosDeTeclas() {
        //agregado hugo

        keyDispaycher = new KeyEventDispatcher() {

            @Override
            public boolean dispatchKeyEvent(KeyEvent evt) {
                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow().getClass().getSimpleName().equals("DiagCobroTicket2")) {

                    if (evt.getID() == KeyEvent.KEY_PRESSED) {
                        if (evt.getKeyCode() == KeyEvent.VK_F5) {
                            ActualizarTickets();
                        }
                        if (evt.getKeyCode() == KeyEvent.VK_F1) {
                            agregarPagoEfectivo();
                        }
                        if (evt.getKeyCode() == KeyEvent.VK_F2) {
                            agregarPagoTarjeta();
                        }
                        if (evt.getKeyCode() == KeyEvent.VK_F3) {
                            agregarPagoCuentaCorriente();
                        }
                        if (evt.getKeyCode() == KeyEvent.VK_TAB && tblTickets.isFocusOwner()) {
                            btnEfectivo.requestFocus();
                        }
                        if (evt.getKeyCode() == KeyEvent.VK_DELETE && tblPagos.isFocusOwner()) {
                            quitarPago();
                        }
                    }
                }
                return false;
            }

        };
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(keyDispaycher);
        System.out.println("evento teclas: " + keyDispaycher);
    }

    private void ActualizarTickets() {
        listaTickets = VentaFacade.getInstance().listaVentasSinCobrar(sucursal);
        cargarTablaTickets(listaTickets);
    }

    private void cargarTablaTickets(List<Venta> ventas) {
        modeloTablaTickets = new ModeloTablaNoEditable();
        cargarEncabezadosTablaGastos(modeloTablaTickets);
        configurarTablaTickets(tblTickets);
        try {
            cargarTickets(ventas);
        } catch (Exception ex) {
            Logger.getLogger(DiagCobroTicket2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarTablaPagos(List<TipoPago> tipoPagos) {
        modeloTablaPagos = new ModeloTablaNoEditable();
        cargarEncabezadosTablaPagos(modeloTablaPagos);
        configurarTablaPagos(tblPagos);
        try {
            cargarPagos(tipoPagos);
        } catch (Exception ex) {
            Logger.getLogger(DiagCobroTicket2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarEncabezadosTablaGastos(ModeloTablaNoEditable modeloTablaTickets) {
        modeloTablaTickets.addColumn("Id");
        modeloTablaTickets.addColumn("Nro Ticket");
        modeloTablaTickets.addColumn("Fecha");
        modeloTablaTickets.addColumn("Cliente");
        modeloTablaTickets.addColumn("Detalle");
        modeloTablaTickets.addColumn("Total");
        tblTickets.setModel(modeloTablaTickets);
    }

    private void cargarEncabezadosTablaPagos(ModeloTablaNoEditable modeloTablaPagos) {
        modeloTablaPagos.addColumn("id");
        modeloTablaPagos.addColumn("Tipo de Pago");
        modeloTablaPagos.addColumn("Monto");
        modeloTablaPagos.addColumn("Monto Total");
        tblPagos.setModel(modeloTablaPagos);
    }

    private void configurarTablaTickets(JTable tbl) {
        JViewport scroll = (JViewport) tbl.getParent();
        int ancho = scroll.getWidth();
        int anchoColumna = 0;
        TableColumnModel modeloColumna = tbl.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (1 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    anchoColumna = (5 * ancho) / 100;
                    break;
            }
            columnaTabla.setPreferredWidth(anchoColumna);
            tbl.setColumnModel(modeloColumna);
        }
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
        tbl.getTableHeader().setBackground(java.awt.Color.WHITE);
        tbl.getTableHeader().setForeground(Color.BLACK);
        //Si le queremos cambiar el tamaño a la tablita
        tbl.setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 15));
    }

    private void configurarTablaPagos(JTable tbl) {
        JViewport scroll = (JViewport) tbl.getParent();
        int ancho = scroll.getWidth();
        int anchoColumna = 0;
        TableColumnModel modeloColumna = tbl.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (1 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    anchoColumna = (5 * ancho) / 100;
                    break;
            }
            columnaTabla.setPreferredWidth(anchoColumna);
            tbl.setColumnModel(modeloColumna);

        }
        modeloColumna.getColumn(1).setPreferredWidth(300);
        modeloColumna.getColumn(2).setPreferredWidth(50);
        modeloColumna.getColumn(3).setPreferredWidth(50);
        tbl.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
        tbl.getTableHeader().setBackground(java.awt.Color.WHITE);
        tbl.getTableHeader().setForeground(Color.BLACK);
        //Si le queremos cambiar el tamaño a la tablita
        tbl.setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 15));
    }

    private void cargarTickets(List<Venta> ventas) {
        try {
            modeloTablaTickets = new ModeloTablaNoEditable();
            cargarEncabezadosTablaGastos(modeloTablaTickets);
            for (Venta v : ventas) {
                cargarticket(v);
            }

            tblTickets.setModel(modeloTablaTickets);
            Comunes.setOcultarColumnasJTable(tblTickets, 0);
        } catch (Exception ex) {
            Logger.getLogger(DiagSueldosAdelantos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarPagos(List<TipoPago> tipoPagos) {
        try {
            modeloTablaPagos = new ModeloTablaNoEditable();
            cargarEncabezadosTablaPagos(modeloTablaPagos);
            configurarTablaPagos(tblPagos);
            for (TipoPago tipoPago : tipoPagos) {
                cargarPago(tipoPago);
            }

            tblPagos.setModel(modeloTablaPagos);
            Comunes.setOcultarColumnasJTable(tblPagos, 0);
        } catch (Exception ex) {
            Logger.getLogger(DiagSueldosAdelantos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarticket(Venta venta) {
        Object[] fila = new Object[6];
        fila[0] = venta.getId();

        fila[1] = venta.getNumeroTicket();
        SimpleDateFormat formats = new SimpleDateFormat("dd/MM/yyyy");
        try {
            fila[2] = formats.format(venta.getFecha());
        } catch (Exception e) {

        }

        fila[3] = venta.getCliente();
        // CARGAMOS LOS ARTICULOS EN UN STRING PARA MOSTRARLOS
        StringBuilder stringArticulos = new StringBuilder();
        for (VentaArticulo a : venta.getVentasArticulos()) {
            stringArticulos.append(a.getArticuloDescripcion());
            stringArticulos.append(" ");
        }
        fila[4] = stringArticulos;
        fila[5] = new DecimalFormat("0.00").format(venta.getMonto());

        modeloTablaTickets.addRow(fila);

    }

    private void cargarPago(TipoPago tipoPago) {
        Object[] fila = new Object[4];
        try {
            fila[0] = tipoPago.getIdTarjeta();
        } catch (Exception e) {

        }
        fila[1] = tipoPago.getTipoPago();
        fila[2] = tipoPago.getMonto();
        fila[3] = tipoPago.getMontoTotal();
        modeloTablaPagos.addRow(fila);
    }

    private void cobrarTicket() {

        reiniciarCobroTicket();
        if (tblTickets.getSelectedRow() != -1) {
            //seleccionamos ticket de la tabla
            ticket = listaTickets.get(tblTickets.getSelectedRow());
            tfNroTicket.setText(String.valueOf(ticket.getNumeroTicket()));

            tfClienteTicket.setText(ticket.getCliente());

            //saldo inicial cuando seleccionamos el ticket que 
            //queremos restar de los pagos
            saldo = ticket.getMonto();
            tfSaldo.setText(new DecimalFormat("0.00").format(saldo));
            tfTotal.setText(new DecimalFormat("0.00").format(saldo));
            aPagarEfectivo = ticket.getMonto();
//            tfApagarEfectivo.setText(new DecimalFormat("0.00").format(aPagarEfectivo));

        }
        btnEfectivo.requestFocus();
    }

    private boolean validar() {
        if (ticket == null) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un ticket: ");
            tblTickets.requestFocus();
            return false;
        }
        if (listaPagos.isEmpty()) {
            JOptionPane.showMessageDialog(null, "debe agregar pagos ");
            btnEfectivo.requestFocus();
            return false;
        }
        subtotal = new BigDecimal("0.0");
        for (TipoPago tipoPago : listaPagos) {
            subtotal = subtotal.add(tipoPago.getMonto());
        }
        if (ticket.getMonto().subtract(subtotal).signum() > 0) {
            JOptionPane.showMessageDialog(null, "Monto a pagar menor que monto del ticket: " + ticket.getMonto());
            return false;
        }
        return true;
    }

    private void seleccionarTicket() {
        cobrarTicket();
    }

    private void agregarPagoEfectivo() {
        if (ticket != null) {
            if (saldo.signum() == 1) {
                diagCobroEfectivo cobroEfectivo = new diagCobroEfectivo(null, true, saldo);
                cobroEfectivo.setLocation(Comunes.centrarDialog(cobroEfectivo));
                cobroEfectivo.setVisible(true);
                if (cobroEfectivo.getaPagarEfectivo() != null) {
                    saldo = saldo.subtract(cobroEfectivo.getaPagarEfectivo());
                    tfSaldo.setText(new DecimalFormat("0.00").format(saldo));
                    //los tipos de pagos son una clase anidada solo sirve para 
                    // cargar la tabla de pagos nada mas
                    TipoPago tipoPago = new TipoPago();
                    tipoPago.setTipoPago("Efectivo");
                    tipoPago.setMonto(cobroEfectivo.getaPagarEfectivo());
                    tipoPago.setMontoTotal(cobroEfectivo.getaPagarTotal());
                    listaPagos.add(tipoPago);
                    cargarTablaPagos(listaPagos);
                    ActualizarTickets();
                    btnTarjetaVale.requestFocus();

                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede agregar mas pagos", "Mensaje", JOptionPane.ERROR_MESSAGE);
                btnAceptar.requestFocus();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un ticket");
            tblTickets.requestFocus();
        }

    }

    private void reiniciarCobroTicket() {
        ticket = null;
        saldo = BigDecimal.ZERO;
        tfNroTicket.setText("");
        tfClienteTicket.setText("");
        listaPagos = new ArrayList<>();
        modeloTablaPagos = new ModeloTablaNoEditable();
        cargarEncabezadosTablaPagos(modeloTablaPagos);
        tfSaldo.setText("");
        tfTotal.setText("");
//        tfApagarEfectivo.setText("");
        cuentaCorriente = null;
        agregoPagoCuentaCorriente = false;
        aPagarEfectivo = BigDecimal.ZERO;
        for (CuponTarjeta cuponTarjeta : listaCuponesTarjeta) {
            CuponTarjetaFacade.getInstance().eliminar(cuponTarjeta.getId());
        }
        listaCuponesTarjeta = new ArrayList<>();
        tblTickets.requestFocus();
    }

    private void agregarPagoTarjeta() {
        if (ticket != null) {
            if (saldo.signum() == 1) {
                diagCobroTarjetaVale cobroTarjeta = new diagCobroTarjetaVale(null, true, saldo);
                cobroTarjeta.setLocation(Comunes.centrarDialog(cobroTarjeta));
                cobroTarjeta.setVisible(true);
                if (cobroTarjeta.getCuponTarjeta() != null) {
                    cobroTarjeta.getCuponTarjeta().setCliente(getClienteDelTicket(ticket));
                    cobroTarjeta.getCuponTarjeta().setFecha(Comunes.obtenerFechaActualDesdeDB());
                    cobroTarjeta.getCuponTarjeta().setVenta(ticket);
                    CuponTarjetaFacade.getInstance().alta(cobroTarjeta.getCuponTarjeta());
                    listaCuponesTarjeta.add(cobroTarjeta.getCuponTarjeta());
                    saldo = saldo.subtract(cobroTarjeta.getCuponTarjeta().getImporteCupon());
                    tfSaldo.setText(new DecimalFormat("0.00").format(saldo));
                    //como se paga con tarjeta, no representa ingreso inmediato a caja
                    aPagarEfectivo = aPagarEfectivo.subtract(cobroTarjeta.getCuponTarjeta().getImporteCupon());
//                tfApagarEfectivo.setText(aPagarEfectivo.toString());
                    //los tipos de pagos son una clase anidada solo sirve para 
                    // cargar la tabla de pagos nada mas
                    TipoPago tipoPago = new TipoPago();
                    tipoPago.setIdTarjeta(cobroTarjeta.getCuponTarjeta().getId());
                    tipoPago.setTipoPago("Tarjeta " + cobroTarjeta.getCuponTarjeta().getPlanTarjeta());
                    tipoPago.setMonto(cobroTarjeta.getCuponTarjeta().getImporteCupon());
                    tipoPago.setMontoTotal(cobroTarjeta.getCuponTarjeta().getImporteCuponConRecargo());
                    listaPagos.add(tipoPago);
                    cargarTablaPagos(listaPagos);
                    ActualizarTickets();
                    btnCuentaCorriente.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede agregar mas pagos", "Mensaje", JOptionPane.ERROR_MESSAGE);
                btnAceptar.requestFocus();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un ticket");
            tblTickets.requestFocus();
        }
    }

    private void agregarPagoCuentaCorriente() {
        if (ticket != null) {
            if (saldo.signum() == 1) {
                if (!ticket.isEsPersona() || !ticket.getCliente().contains("EVENTUAL")) {
                    if (!agregoPagoCuentaCorriente) {
                        if (clienteTieneCuentaCorriente()) {

                            diagCobroCCorriente cobroCCorriente = new diagCobroCCorriente(null, true, saldo, getClienteDelTicket(ticket));
                            cobroCCorriente.setLocation(Comunes.centrarDialog(cobroCCorriente));
                            cobroCCorriente.setVisible(true);
                            if (cobroCCorriente.getaPagarCuentaCorriente() != null) {
                                saldo = saldo.subtract(cobroCCorriente.getaPagarCuentaCorriente());
                                cuentaCorriente = cobroCCorriente.getCuentaCorriente();
                                cuentaCorriente.setVenta(ticket);
                                cuentaCorriente.setImporteOriginal(ticket.getMonto());
                                tfSaldo.setText(new DecimalFormat("0.00").format(saldo));
                                //como se paga con cuenta corriente, no representa ingreso inmediato a caja
                                aPagarEfectivo = aPagarEfectivo.subtract(cobroCCorriente.getaPagarCuentaCorriente());
//                            tfApagarEfectivo.setText(aPagarEfectivo.toString());
                                //los tipos de pagos son una clase anidada solo sirve para 
                                // cargar la tabla de pagos nada mas
                                TipoPago tipoPago = new TipoPago();
                                tipoPago.setTipoPago("CuentaCorriente");
                                tipoPago.setMonto(cobroCCorriente.getaPagarCuentaCorriente());
                                listaPagos.add(tipoPago);
                                cargarTablaPagos(listaPagos);
                                ActualizarTickets();
                                agregoPagoCuentaCorriente = true;
                                btnAceptar.requestFocus();
                            }

                        } else {
                            int i = JOptionPane.showConfirmDialog(null, "El cliente no tiene cuenta corriente. Desea crearle una?", "Confirmar", JOptionPane.YES_NO_OPTION);
                            if (i == 0) {
                                if (!agregoPagoCuentaCorriente) {
                                    diagCobroCCorriente cobroCCorriente = new diagCobroCCorriente(null, true, saldo, getClienteDelTicket(ticket));
                                    cobroCCorriente.setLocation(Comunes.centrarDialog(cobroCCorriente));
                                    cobroCCorriente.setVisible(true);
                                    if (cobroCCorriente.getaPagarCuentaCorriente() != null) {
                                        saldo = saldo.subtract(cobroCCorriente.getaPagarCuentaCorriente());
                                        cuentaCorriente = cobroCCorriente.getCuentaCorriente();
                                        cuentaCorriente.setVenta(ticket);
                                        cuentaCorriente.setImporteOriginal(ticket.getMonto());
                                        tfSaldo.setText(new DecimalFormat("0.00").format(saldo));
                                        //como se paga con cuenta corriente, no representa ingreso inmediato a caja
                                        aPagarEfectivo = aPagarEfectivo.subtract(cobroCCorriente.getaPagarCuentaCorriente());
//                                    tfApagarEfectivo.setText(aPagarEfectivo.toString());
                                        //los tipos de pagos son una clase anidada solo sirve para 
                                        // cargar la tabla de pagos nada mas
                                        TipoPago tipoPago = new TipoPago();
                                        tipoPago.setTipoPago("CuentaCorriente");
                                        tipoPago.setMonto(cobroCCorriente.getaPagarCuentaCorriente());
                                        listaPagos.add(tipoPago);
                                        cargarTablaPagos(listaPagos);
                                        ActualizarTickets();
                                        agregoPagoCuentaCorriente = true;
                                        btnAceptar.requestFocus();
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Solo se puede pagar con una cuenta corriente");
                                }
                            }

                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Solo se puede pagar con una cuenta corriente");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Es un cliente Eventual, no puede tener cuenta corriente");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede agregar mas pagos", "Mensaje", JOptionPane.ERROR_MESSAGE);
                btnAceptar.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un ticket");
            tblTickets.requestFocus();
        }
    }

    private boolean clienteTieneCuentaCorriente() {
        List<CuentaCorriente> listaCuentas = CuentaCorrienteFacade.getInstance().getCuentasCCliente(getClienteDelTicket(ticket));
        return !listaCuentas.isEmpty();
    }

    private void modificarPago() {

    }

    private void quitarPago() {
        if (tblPagos.getSelectedRow() != -1) {
            int filaSeleccionada = tblPagos.getSelectedRow();
            //sumamos al saldo
            saldo = saldo.add(listaPagos.get(filaSeleccionada).monto);
            tfSaldo.setText(new DecimalFormat("0.00").format(saldo));

            //en caso que el pago sea cuenta corriente hacemos null los datos de la cuenta
            if (listaPagos.get(filaSeleccionada).getTipoPago().equals("CuentaCorriente")) {
                cuentaCorriente = null;
                agregoPagoCuentaCorriente = false;
                //sumamos el pago de cuenta corriente que se borro
                aPagarEfectivo = aPagarEfectivo.add(listaPagos.get(filaSeleccionada).monto);
                //tfApagarEfectivo.setText(aPagarEfectivo.toString());
            }
            if (listaPagos.get(filaSeleccionada).getTipoPago().contains("Tarjeta")) {
                CuponTarjeta cuponEliminar = CuponTarjetaFacade.getInstance().buscar(listaPagos.get(filaSeleccionada).idTarjeta);
                listaCuponesTarjeta.remove(cuponEliminar);
                CuponTarjetaFacade.getInstance().eliminar(cuponEliminar.getId());
                System.out.println("lista de cupones " + listaCuponesTarjeta);
                //sumamos el pago de tarjeta que se borro
                aPagarEfectivo = aPagarEfectivo.add(listaPagos.get(filaSeleccionada).monto);
//                tfApagarEfectivo.setText(aPagarEfectivo.toString());
            }
            //borramos el registro de la fila
            listaPagos.remove(filaSeleccionada);
            ((ModeloTablaNoEditable) tblPagos.getModel()).removeRow(filaSeleccionada);
            btnEfectivo.requestFocus();
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un pago para eliminar");
        }
    }

    private void verDetalleTicket() {
        if (tblTickets.getSelectedRow() != -1) {
            //seleccionamos ticket de la tabla
            ticket = listaTickets.get(tblTickets.getSelectedRow());
            DiagDetalleTicketCaja diagDetalleTicketCaja = new DiagDetalleTicketCaja(null, true, ticket);
            diagDetalleTicketCaja.setLocation(Comunes.centrarDialog(diagDetalleTicketCaja));
            diagDetalleTicketCaja.setVisible(true);

        }
    }

    private void enviarVentaSOAP(CobroVenta cobroVenta) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("HGM678leR54G99FFjv");
        stringBuilder.append("|");
        //DNI
        try {

            stringBuilder.append(Comunes.quitarPuntosDNI(cobroVenta.getVenta().getDniCliente()));
            stringBuilder.append("|");
        } catch (Exception e) {
            stringBuilder.append("|");
        }
        //NOMBRE CLIENTE
        try {
            stringBuilder.append(cobroVenta.getVenta().getCliente());
            stringBuilder.append("|");
        } catch (Exception e) {
            stringBuilder.append("|");
        }
        //TELEFONOS
        String celular = "0";
        String fijo = "0";

        if (!ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente()).getTelefonos().isEmpty()) {
            List<Telefono> listaTelefonos = ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente()).getTelefonos();
            for (Telefono telefono : listaTelefonos) {
                if (telefono.getTipoTelefono().getDescripcion().contains("CELULAR")) {
                    celular = telefono.getNumero().trim();
                }
                if (telefono.getTipoTelefono().getDescripcion().contains("FIJO")) {
                    fijo = telefono.getNumero().trim();
                }
            }
            //celular
            stringBuilder.append(celular);
            stringBuilder.append("|");
            //fijo
            stringBuilder.append(fijo);
            stringBuilder.append("|");

        } else {
            //celular
            stringBuilder.append("0");
            stringBuilder.append("|");
            //fijo
            stringBuilder.append("0");
            stringBuilder.append("|");
        }

        //MAIL
        try {
            if (!ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente()).getCorreosElectronicos().isEmpty()) {
                stringBuilder.append(ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente()).getCorreosElectronicos().get(0));
                stringBuilder.append("|");
            } else {
                //stringBuilder.append("nose@nose.com");
                stringBuilder.append("|");
            }

        } catch (Exception e) {
            //stringBuilder.append("nose@nose.com");
            stringBuilder.append("|");
        }
        //MONTO
        try {
            stringBuilder.append(cobroVenta.getVenta().getMonto());
            stringBuilder.append("|");
        } catch (Exception e) {
            stringBuilder.append("0");
            stringBuilder.append("|");
        }
        //COMPROBANTE
        try {
            stringBuilder.append(cobroVenta.getVenta().getNumeroTicket());
            stringBuilder.append("|");
        } catch (Exception e) {
            stringBuilder.append("0");
            stringBuilder.append("|");
        }
        //sucursal
        try {
            stringBuilder.append(cobroVenta.getVenta().getSucursal().getCodigo());
            stringBuilder.append("|");
        } catch (Exception e) {
            stringBuilder.append("0");
            stringBuilder.append("|");
        }
        //ID VENDEDOR
        try {
            stringBuilder.append(cobroVenta.getVenta().getUsuario().getId());
            stringBuilder.append("|");
        } catch (Exception e) {
            stringBuilder.append("0");
            stringBuilder.append("|");
        }
        //NOMBRE VENDEDOR
        try {
            stringBuilder.append(cobroVenta.getVenta().getUsuario().getNombreCompleto());
            stringBuilder.append("|");
        } catch (Exception e) {
            stringBuilder.append("NN");
            stringBuilder.append("|");
        }
        //FECHA NAC CLIENTE
        try {
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            if (ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente()).getFechaNacimiento() != null) {
                stringBuilder.append(formatoFecha.format(ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente()).getFechaNacimiento()));
                stringBuilder.append("|");
            } else {
                stringBuilder.append("01/01/2019");
                stringBuilder.append("|");
            }
        } catch (Exception e) {
            stringBuilder.append("01/01/2019");
            stringBuilder.append("|");
        }
        //SEXO CLIENTE
        try {
            if (ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente()).getSexo() != null) {
                Persona persona = ClienteFacade.getInstance().getPersonaXDni(cobroVenta.getVenta().getDniCliente());
                if (persona.getSexo().getName().contains("MASCULINO")) {
                    stringBuilder.append("M");
                    stringBuilder.append("|");
                }
                if (persona.getSexo().getName().contains("FEMENINO")) {
                    stringBuilder.append("F");
                    stringBuilder.append("|");
                }
            } else {
                stringBuilder.append("N");
                stringBuilder.append("|");
                stringBuilder.append("N");
                stringBuilder.append("|");
            }
        } catch (Exception e) {
            stringBuilder.append("N");
            stringBuilder.append("|");
            stringBuilder.append("N");
            stringBuilder.append("|");
        }
        //FECHA VENTA
        try {
            SimpleDateFormat formatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            stringBuilder.append(formatoFecha.format(cobroVenta.getFecha()));
            stringBuilder.append("|");

        } catch (Exception e) {
            stringBuilder.append("01/01/2019");
            stringBuilder.append("|");
        }
        //NUMERO DE SOCIO DNI
        try {
            stringBuilder.append(cobroVenta.getVenta().getDniCliente());
        } catch (Exception e) {

        }
        //String strCadena = "HGM678leR54G99FFjv|30207103|Franco Zurita Perea|3834811718|414141|francozurita@gmail.com|5000|0|1|0|Franco Zurita|'14/4/1983|Masc|5/9/2019|1";
        String cadena = new String();
        System.out.println("CADENA: " + stringBuilder.toString());
        Runnable r = new Soap(stringBuilder.toString(),cobroVenta);
        Thread t = new Thread(r);
        t.start();
    }

    class TipoPago {

        public String tipoPago;
        public BigDecimal monto;
        public BigDecimal montoTotal;
        public Long idTarjeta;

        public BigDecimal getMontoTotal() {
            return montoTotal;
        }

        public void setMontoTotal(BigDecimal montoTotal) {
            this.montoTotal = montoTotal;
        }

        public Long getIdTarjeta() {
            return idTarjeta;
        }

        public void setIdTarjeta(Long idTarjeta) {
            this.idTarjeta = idTarjeta;
        }

        public String getTipoPago() {
            return tipoPago;
        }

        public void setTipoPago(String tipoPago) {
            this.tipoPago = tipoPago;
        }

        public BigDecimal getMonto() {
            return monto;
        }

        public void setMonto(BigDecimal monto) {
            this.monto = monto;
        }

    }

    public Cliente getClienteDelTicket(Venta ticket) {
        Cliente cliente;
        if (ticket.isEsPersona()) {
            cliente = ClienteFacade.getInstance().getPersonaXDni(ticket.getDniCliente());
        } else {
            cliente = ClienteFacade.getInstance().buscarCuitEmpresaObjeto(ticket.getDniCliente());
        }
        return cliente;
    }

}
