/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.Caja;

import Recursos.ProgressBar;
import entidades.Sucursal;
import entidades.articulo.Articulo;
import entidades.caja.Caja;
import entidades.caja.CobranzaCtaCte;
import entidades.caja.CuentaCorriente;
import entidades.caja.CuponTarjeta;
import entidades.caja.Gasto;
import entidades.caja.Ingreso;
import entidades.caja.MovimientoCaja;
import entidades.caja.PlanTarjeta;
import entidades.caja.RetiroEfectivo;
import entidades.caja.Sueldo;
import entidades.cliente.Organismo;
import entidades.cliente.Persona;

import facade.CajaFacade;
import facade.ClienteFacade;
import facade.CobranzaCtaCteFacade;
import facade.CuentaCorrienteFacade;
import facade.CuponTarjetaFacade;
import facade.SucursalFacade;
import includes.Comunes;
import includes.ExportarExcel;
import includes.FormatoTablaConColor;
import includes.ModeloTablaNoEditable;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

/**
 *
 * @author vicky
 */
public class DiagReporte_detalleCaja extends javax.swing.JDialog {

    /**
     * Creates new form DiagClienteGenerico
     */
    private ModeloTablaNoEditable modeloTablaCaja;
    private Vector headers = new Vector();
    private Vector data = new Vector();

    private Persona persona;
    private Organismo organismo;
    private Sucursal sucursal;

    private int AuxTicket, AuxSucursal;
    private String tipoOperacion;
    private DefaultTableModel temp;

    public DiagReporte_detalleCaja(java.awt.Frame parent, boolean modal, Sucursal sucursal) {
        super(parent, modal);
        initComponents();
        this.sucursal = sucursal;
        inicializarComponentes();
    }

    public DiagReporte_detalleCaja(java.awt.Frame parent, boolean modal, String tipoOperacion, Sucursal sucursal) {
        super(parent, modal);
        initComponents();
        this.tipoOperacion = tipoOperacion;
        this.sucursal = sucursal;
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgTipo_reporte = new javax.swing.ButtonGroup();
        btnCerrar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCaja = new javax.swing.JTable();
        btnExportarArt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jdpFecha_desde = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jdpFecha_hasta = new org.jdesktop.swingx.JXDatePicker();
        jLabel4 = new javax.swing.JLabel();
        jcbSucursal = new javax.swing.JComboBox();
        btnGenerar = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/back.png"))); // NOI18N
        btnCerrar.setText(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.btnCerrar.text")); // NOI18N
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.jPanel3.border.title"))); // NOI18N

        tblCaja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Anulado", "Descuento", "Fecha", "Monto", "Numero Ticket", "Apellido Cli", "Nombre Cli", "Nro Dni", "Tipo Dni", "Razon Social", "CUIL", "Cod Sucursal", "Usu", "CantidadPeso", "PrecioxCatidad", "Precio Cobrado", "Precio Unitario", "Articulo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCaja);

        btnExportarArt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/new_page.png"))); // NOI18N
        btnExportarArt.setText(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.btnExportarArt.text")); // NOI18N
        btnExportarArt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarArtActionPerformed(evt);
            }
        });

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.jLabel2.text")); // NOI18N

        jdpFecha_desde.setFormats("dd/MM/yyyy");

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.jLabel3.text")); // NOI18N

        jdpFecha_hasta.setFormats("dd/MM/yyyy");

        jLabel4.setText(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.jLabel4.text")); // NOI18N

        jcbSucursal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/process.png"))); // NOI18N
        btnGenerar.setText(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.btnGenerar.text")); // NOI18N
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1321, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExportarArt, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jdpFecha_desde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jdpFecha_hasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbSucursal, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(35, 35, 35)
                        .addComponent(btnGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jdpFecha_desde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jdpFecha_hasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jcbSucursal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnExportarArt, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(584, 584, 584)
                .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(605, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCerrar)
                .addContainerGap())
        );

        jPanel3.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(DiagReporte_detalleCaja.class, "DiagReporte_detalleCaja.jPanel3.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnExportarArtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarArtActionPerformed
        Exportar();
    }//GEN-LAST:event_btnExportarArtActionPerformed

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
//        limpiarTabla();
        modeloTablaCaja = new ModeloTablaNoEditable();
        cargarEncabezadosTablaCaja(modeloTablaCaja);
        configurarTabla(tblCaja);

        try {
            if (jdpFecha_desde.getDate().compareTo(jdpFecha_hasta.getDate()) > 0) {
                throw new Exception("La fecha de cierre 'desde' debe ser menor a la fecha 'hasta'");
            }//fin if

            Calendar calendar = Calendar.getInstance();
            Calendar calendar_desde = Calendar.getInstance();
            calendar_desde.setTime(jdpFecha_desde.getDate()); // Configuramos la fecha que se recibe

            calendar.setTime(jdpFecha_hasta.getDate()); // Configuramos la fecha que se recibe
            calendar.add(Calendar.DAY_OF_YEAR, 1);

            try {
                sucursal = (Sucursal) this.jcbSucursal.getSelectedItem();
            } catch (Exception e) {
                sucursal = null;
            }

            List<Caja> cajas = CajaFacade.getInstance().findCajaByFechaCierreSucursal(
                    calendar_desde.getTime(),
                    calendar.getTime(), sucursal);

            if (cajas.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No se encontraron datos. Vuelva a realizar la búsqueda.");
            } else {
                //cargar los datos  
                this.jProgressBar1.setMinimum(0);
                this.jProgressBar1.setMaximum(cajas.size());
                //new Thread(new ProgressBar( this.jProgressBar1 , cajas.size() )).start();

                CargarCajas cc = new CargarCajas(cajas, btnGenerar, btnExportarArt);
                cc.start();

                /*this.cargarTablaCaja(CajaFacade.getInstance().findCajaByFechaCierreSucursal(
                 jdpFecha_desde.getDate(),
                 jdpFecha_hasta.getDate(), sucursal));*/
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGenerarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagReporte_detalleCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagReporte_detalleCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagReporte_detalleCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagReporte_detalleCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DiagReporte_detalleCaja dialog = new DiagReporte_detalleCaja(new javax.swing.JFrame(), true, new Sucursal());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgTipo_reporte;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnExportarArt;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcbSucursal;
    private org.jdesktop.swingx.JXDatePicker jdpFecha_desde;
    private org.jdesktop.swingx.JXDatePicker jdpFecha_hasta;
    private javax.swing.JTable tblCaja;
    // End of variables declaration//GEN-END:variables

    private void inicializarComponentes() {
        this.setTitle("Reportes de Caja - Detalle de Caja");
        modeloTablaCaja = new ModeloTablaNoEditable();
        cargarEncabezadosTablaCaja(modeloTablaCaja);
        if (sucursal.getCodigo().equals("1")) {
            //SI ES LA CENTRAL QUE MUESTRE TODAS LAS CAJAS DE TODAS LAS SUCURSALES

            try {
                //cargarTablaCaja(CajaFacade.getInstance().getCajasCerradas());
                //mostrar en el combo todas las sucursales
                Comunes.cargarJComboConBlancoPersonalizado(jcbSucursal, SucursalFacade.getInstance().getTodos(), "Todos");

            } catch (Exception e) {
            }
        } else {
            //MOSTRAMOS SOLO LAS CAJAS DE LA SUCURSAL
            try {
                //cargarTablaCaja(CajaFacade.getInstance().getCajasCerradas(sucursal));
                //cargar solo la sucursal que esta
                Comunes.cargarJCombo(jcbSucursal, SucursalFacade.getInstance().buscarPorNombre(sucursal.getNombre()));
            } catch (Exception e) {
            }
        }

        AuxTicket = 0;
        AuxSucursal = 0;

    }

    private void cargarEncabezadosTablaCaja(ModeloTablaNoEditable modeloTablaCaja) {
        // modeloTablaCaja.addColumn("Id");
        modeloTablaCaja.addColumn("Caja Inicial");
        modeloTablaCaja.addColumn("Caja Final");
        modeloTablaCaja.addColumn("Recargo por Tarjeta");
        modeloTablaCaja.addColumn("Fecha Apertura");
        modeloTablaCaja.addColumn("Fecha Cierre");
        modeloTablaCaja.addColumn("Sucursal");
        modeloTablaCaja.addColumn("Usuario");
        modeloTablaCaja.addColumn("Tipo");
        tblCaja.setModel(modeloTablaCaja);
    }//private void cargarEncabezadosTablaCaja(ModeloTablaNoEditable modeloTablaCaja)

    private void configurarTabla(JTable tbl) {
        JViewport scroll = (JViewport) tbl.getParent();
        int ancho = scroll.getWidth();

        int anchoColumna = 0;
        TableColumnModel modeloColumna = tbl.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (25 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (10 * ancho) / 100;
                    break;
                case 2:
                    anchoColumna = (10 * ancho) / 100;
                    break;
                case 3:
                    anchoColumna = (15 * ancho) / 100;
                    break;
                case 4:
                    anchoColumna = (15 * ancho) / 100;
                    break;
                case 5:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 6:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 7:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    anchoColumna = (20 * ancho) / 100;
                    break;
            }
            columnaTabla.setPreferredWidth(anchoColumna);
            tbl.setColumnModel(modeloColumna);
        }//for
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
        tbl.getTableHeader().setBackground(java.awt.Color.WHITE);
        tbl.getTableHeader().setForeground(Color.BLACK);
        //Si le queremos cambiar el tamaño a la tablita
        tbl.setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));

        //scroll horizontal
        tbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tbl.doLayout();
    }//private void configurarTabla(JTable tbl)

    private void Exportar() {
        new ExportarExcel().crearExcelJtable(tblCaja, "Listado de Cajas");
        modeloTablaCaja = new ModeloTablaNoEditable();
        cargarEncabezadosTablaCaja(modeloTablaCaja);
    }

    public class CargarCajas extends Thread {

        List<Caja> lstCaja;
        JButton botonUno;
        JButton botonDos;

        public CargarCajas(List<Caja> lstCaja, JButton botonUno, JButton botonDos) {
            this.lstCaja = lstCaja;
            this.botonUno = botonUno;
            this.botonDos = botonDos;
            /*int tamanio = this.lstCaja.size();
             for(int i=0; i < tamanio; i++){
             modeloTablaCaja.removeRow(i);
             }//fin for*/
        }

        private void cargarCaja(Caja caja) {

            SimpleDateFormat formats = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
            DecimalFormatSymbols simboloSeparador = new DecimalFormatSymbols(Locale.ENGLISH);
            simboloSeparador.setDecimalSeparator(',');
            DecimalFormat formatoConComa = new DecimalFormat("#####.###", simboloSeparador);

            Object[] fila = new Object[8];
            fila[0] = "-" + formatoConComa.format(caja.getCajaInicial());//.toString().replace('.', ',')
            fila[1] = formatoConComa.format(caja.getCajaFinal());//.toString().replace('.', ',')
            fila[2] = " ";
            try {
                fila[3] = formats.format(caja.getFechaInicio());
            } catch (Exception e) {
            }
            try {
                fila[4] = formats.format(caja.getFechaFin());
            } catch (Exception e) {
            }
            fila[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
            try {
                fila[6] = caja.getUsuario().getNombreUsuario();
            } catch (Exception e) {
            }
            fila[7] = " ";
            modeloTablaCaja.addRow(fila);

            /*DETALLE CAJA*/
            //EFECTIVO
            BigDecimal bgEfectivo = new BigDecimal("0.00");

            //GASTOS
            BigDecimal bgGasto = new BigDecimal("0.00");
            List<Object[]> lstGasto = new ArrayList<Object[]>();

            //CUENTA CORRIENTE
            BigDecimal bgCtaCte = new BigDecimal("0.00");
            List<Object[]> lstCtaCte = new ArrayList<Object[]>();
            List<Object[]> lstCtaCte_2 = new ArrayList<Object[]>();
            BigDecimal saldoCtaCte = new BigDecimal("0.00");
            BigDecimal bgImporteFinal = new BigDecimal("0.00");
            BigDecimal bgDifCtaCte = new BigDecimal("0.00");
            BigDecimal bgTotalSaldoCtaCte = new BigDecimal("0.00");
            BigDecimal bgTotalSaldoCtaCte_2 = new BigDecimal("0.00");

            //SUELDOS
            BigDecimal bgSueldo = new BigDecimal("0.00");
            List<Object[]> lstSueldo = new ArrayList<Object[]>();

            //INGRESO
            BigDecimal bgIngreso = new BigDecimal("0.00");
            List<Object[]> lstIngreso = new ArrayList<Object[]>();

            //TARJETA
            BigDecimal bgTarjeta = new BigDecimal("0.00");
            List<Object[]> lstTarjeta = new ArrayList<Object[]>();

            //VALE
            BigDecimal bgVale = new BigDecimal("0.00");
            List<Object[]> lstVale = new ArrayList<Object[]>();

            //RETIRO EFECTIVO
            BigDecimal bgRetiroEfvo = new BigDecimal("0.00");
            List<Object[]> lstRetiroEfvo = new ArrayList<Object[]>();

            for (MovimientoCaja mc : caja.getMovimientosCaja()) {

                //efectivo
                switch (mc.getClass().getSimpleName()) {
                    case "CobroVenta":
                        bgEfectivo = bgEfectivo.add(mc.getImporte());
                        break;

                    case "Gasto":
                        bgGasto = bgGasto.add(mc.getImporte());
                        Gasto gAux = (Gasto) mc;
                        //System.out.println("Gasto: " + ((Gasto)mc).getDescripcion());
                        Object a[] = {"   - " + gAux.getTipoDeGasto().getDescripcion() + " - " + gAux.getDescripcion(), formatoConComa.format(mc.getImporte()), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "GASTOS"};//.toString().replace('.', ',')
                        lstGasto.add(a);
                        break;

                    case "CobranzaCtaCte": /*lo que paga de la cta cte*/

                        bgCtaCte = bgCtaCte.add(mc.getImporte());
                        CobranzaCtaCte ctaCteAux = (CobranzaCtaCte) mc;
                        Long iId_cliente = ctaCteAux.getCliente().getId();

                        /*                    saldoCtaCte = CuentaCorrienteFacade.getInstance().getSaldoCCporTicket(ctaCteAux.getNumero()); //lo que compro
                         System.out.println("saldoCtaCte "+saldoCtaCte);                    
                         List<BigDecimal> saldosCobranzaCtaCte = CobranzaCtaCteFacade.getInstance().getSaldoporFechayTicket(caja.getFechaInicio(), mc.getFecha(), ctaCteAux.getNumero()); //lo que pago
              
                         for(BigDecimal saldoccc : saldosCobranzaCtaCte) { 
                         if((saldoccc != null) && (saldoCtaCte != null) ){ // 
                         saldoCtaCte = saldoCtaCte.subtract(saldoccc);
                         bgTotalSaldoCtaCte = bgTotalSaldoCtaCte.add(saldoCtaCte);
                         System.out.println("totalsaldoCtaCte "+bgTotalSaldoCtaCte);       
                         }    
                         } //for                  
                         if (saldoCtaCte != null){
                         bgImporteFinal = saldoCtaCte;
                         System.out.println("ENTRO POR IF IMPORTE FINAL " + bgImporteFinal);  */
//                    } else {
                        bgImporteFinal = mc.getImporte().negate();
                        bgTotalSaldoCtaCte = bgTotalSaldoCtaCte.add(mc.getImporte());

//                    }//else
                        String sTipo_cliente = ClienteFacade.getInstance().buscarTipoCliente(iId_cliente).getClass().getSimpleName();
                        switch (sTipo_cliente) {
                            case "Persona":
                                Object cc_p[] = {"   - " + ClienteFacade.getInstance().getPersonasXId(iId_cliente).getNombre() + "," + ClienteFacade.getInstance().getPersonasXId(iId_cliente).getApellido(), formatoConComa.format(bgImporteFinal), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "CTA. CTE."};//.toString().replace('.', ',')
                                lstCtaCte.add(cc_p);
                                break;
                            case "Organismo":
                                Object cc_o[] = {"   - " + ClienteFacade.getInstance().getOrganismoXId(iId_cliente).getRazonSocial(), formatoConComa.format(bgImporteFinal), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "CTA. CTE."};//.toString().replace('.', ',')
                                lstCtaCte.add(cc_o);
                                break;
                        }//switch   
                        break;

                    case "Sueldo":
                        bgSueldo = bgSueldo.add(mc.getImporte());
                        Sueldo sAux = (Sueldo) mc;

                        Object s[] = {"   - " + sAux.getDescripcion() + " - " + sAux.getEmpleado().getApellido() + "," + sAux.getEmpleado().getNombre(), formatoConComa.format(mc.getImporte()), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), " PAGO DE SUELDO"};//.toString().replace('.', ',')
                        lstSueldo.add(s);
                        break;

                    case "Ingreso":
                        bgIngreso = bgIngreso.add(mc.getImporte());
                        Ingreso iAux = (Ingreso) mc;
                        Object i[] = {"   - " + iAux.getDescripcion(), "-" + formatoConComa.format(mc.getImporte()), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "INGRESOS"};//.toString().replace('.', ',')
                        lstIngreso.add(i);
                        break;

                    case "RetiroEfectivo":
                        bgRetiroEfvo = bgRetiroEfvo.add(mc.getImporte());
                        RetiroEfectivo reAux = (RetiroEfectivo) mc;

                        Object re[] = {"   - " + reAux.getDescripcion(), formatoConComa.format(mc.getImporte()), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "RETIRO EFECTIVO"};//.toString().replace('.', ',')
                        lstRetiroEfvo.add(re);
                        break;
                }// fin switch
            }//fin for

            // CUENTA CORRIENTE *** lo que compro
            for (CuentaCorriente ctacte : caja.getMovimientosCtaCte()) {
                bgTotalSaldoCtaCte_2 = bgTotalSaldoCtaCte_2.add(ctacte.getImporteCtaCte());
                String sTipo_cliente = ClienteFacade.getInstance().buscarTipoCliente(ctacte.getCliente().getId()).getClass().getSimpleName();
                switch (sTipo_cliente) {
                    case "Persona":
                        Object cc_p[] = {"   - " + ClienteFacade.getInstance().getPersonasXId(ctacte.getCliente().getId()).getNombre() + "," + ClienteFacade.getInstance().getPersonasXId(ctacte.getCliente().getId()).getApellido(), formatoConComa.format(ctacte.getImporteCtaCte()), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "CTA. CTE."};//.toString().replace('.', ',')
                        lstCtaCte_2.add(cc_p);
                        break;
                    case "Organismo":
                        Object cc_o[] = {"   - " + ClienteFacade.getInstance().getOrganismoXId(ctacte.getCliente().getId()).getRazonSocial(), formatoConComa.format(ctacte.getImporteCtaCte()), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "CTA. CTE."};//.toString().replace('.', ',')
                        lstCtaCte_2.add(cc_o);
                        break;
                }//switch              
            }//for (CuentaCorriente ctacte : caja.getMovimientosCtaCte())        

            //PARA CUPON TARJETA
            for (CuponTarjeta cuporTarjetaAux : caja.getMovimientosCuponesTarjeta()) {

                if (cuporTarjetaAux.getPlanTarjeta().getEsVale() == true) {
                    Long iId_cliente = cuporTarjetaAux.getCliente().getId();
                    bgVale = bgVale.add(cuporTarjetaAux.getImporteCupon());

                    String sTipo_cliente = ClienteFacade.getInstance().buscarTipoCliente(iId_cliente).getClass().getSimpleName();
                    switch (sTipo_cliente) {
                        case "Persona":
                            Object cv_p[] = {"   - " + cuporTarjetaAux.getPlanTarjeta().getDescripcion() + " - " + ClienteFacade.getInstance().getPersonasXId(iId_cliente).getNombre() + " " + ClienteFacade.getInstance().getPersonasXId(iId_cliente).getApellido(),
                                formatoConComa.format(cuporTarjetaAux.getImporteCupon()), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "VALES"};//cuporTarjetaAux.getPlanTarjeta().getDescripcion() //.toString().replace('.', ',')
                            lstVale.add(cv_p);
                            break;
                        case "Organismo":
                            Object cv_o[] = {"   - " + cuporTarjetaAux.getPlanTarjeta().getDescripcion() + " - " + ClienteFacade.getInstance().getOrganismoXId(iId_cliente).getRazonSocial(),
                                formatoConComa.format(cuporTarjetaAux.getImporteCupon()), " ", formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "VALES"};//cuporTarjetaAux.getPlanTarjeta().getDescripcion() //.toString().replace('.', ',')
                            lstVale.add(cv_o);
                            break;
                    }//switch                 

                } else if (cuporTarjetaAux.getPlanTarjeta().getEsVale() == false) {
                    bgTarjeta = bgTarjeta.add(cuporTarjetaAux.getImporteCuponConRecargo());
                    Object ct[] = {"   - " + cuporTarjetaAux.getPlanTarjeta().getTarjetaDeCredito().getDescripcion() + " - " + cuporTarjetaAux.getPlanTarjeta().getDescripcion() + " - LOTE: " + cuporTarjetaAux.getLote() + " - NRO. CUPÓN: " + cuporTarjetaAux.getNroCupon(),
                        formatoConComa.format(cuporTarjetaAux.getImporteCuponConRecargo()), formatoConComa.format(cuporTarjetaAux.getImporteCuponConRecargo().subtract(cuporTarjetaAux.getImporteCupon())), formats.format(caja.getFechaInicio()), formats.format(caja.getFechaFin()), caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre(), caja.getUsuario().getNombreUsuario(), "TARJETAS"};//cuporTarjetaAux.getPlanTarjeta().getDescripcion()  //.toString().replace('.', ',')
                    lstTarjeta.add(ct);
                }
            }//fin for

            //EFECTIVO
            if (bgEfectivo.compareTo(new BigDecimal("0.00")) != 0) {
                Object[] filaEfectivo = new Object[8];
                filaEfectivo[0] = " * EFECTIVO";
                filaEfectivo[1] = "" + formatoConComa.format(bgEfectivo);///.toString().replace('.', ',')
                filaEfectivo[2] = " ";

                try {
                    filaEfectivo[3] = formats.format(caja.getFechaInicio());
                } catch (Exception e) {
                }
                try {
                    filaEfectivo[4] = formats.format(caja.getFechaFin());
                } catch (Exception e) {
                }
                filaEfectivo[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
                try {
                    filaEfectivo[6] = caja.getUsuario().getNombreUsuario();
                } catch (Exception e) {
                }
                filaEfectivo[7] = "EFECTIVO";
                modeloTablaCaja.addRow(filaEfectivo);

            }//fin if

            //GASTO
            if (bgGasto.compareTo(new BigDecimal("0.00")) != 0) {
                Object[] filaGasto = new Object[8];
                filaGasto[0] = " * GASTOS";
                filaGasto[1] = formatoConComa.format(bgGasto);//.toString().replace('.', ',')
                filaGasto[2] = " ";

                try {
                    filaGasto[3] = formats.format(caja.getFechaInicio());
                } catch (Exception e) {
                }
                try {
                    filaGasto[4] = formats.format(caja.getFechaFin());
                } catch (Exception e) {
                }
                filaGasto[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
                try {
                    filaGasto[6] = caja.getUsuario().getNombreUsuario();
                } catch (Exception e) {
                }
                filaGasto[7] = "GASTOS";
                modeloTablaCaja.addRow(filaGasto);

                for (Object[] gastoArray : lstGasto) {
                    modeloTablaCaja.addRow(gastoArray);
                }//fin for
            }//fin if

            //CTA CTE
            if (bgTotalSaldoCtaCte == null) {
                bgTotalSaldoCtaCte = new BigDecimal("0.00");
            }
            if (bgTotalSaldoCtaCte_2 == null) {
                bgTotalSaldoCtaCte_2 = new BigDecimal("0.00");
            }
            //PARA SUMAR EL TOTAL DE LAS OPERACIONES DE CCORRIENTE
//            for (CuentaCorriente ctacte : caja.getMovimientosCtaCte()) {
//                bgTotalSaldoCtaCte_2.add(ctacte.getImporteCtaCte());
//            }
System.out.println("bgTotalSaldoCtaCte_2 " + bgTotalSaldoCtaCte_2);  
System.out.println("bgTotalSaldoCtaCte " + bgTotalSaldoCtaCte);  
            bgDifCtaCte = bgTotalSaldoCtaCte_2.subtract(bgTotalSaldoCtaCte);
System.out.println("bgDifCtaCte " + bgDifCtaCte);            
            if (bgDifCtaCte.compareTo(new BigDecimal("0.00")) != 0) {
                Object[] filaCtaCte = new Object[8];
                filaCtaCte[0] = " * CTA. CTE.";
                /*teniamos en cuenta bgTotalSaldoCtaCte_2, lo cambiamos a pedido de miguel para que el total tenga en cta los (-) - 10/2016*/
                filaCtaCte[1] = formatoConComa.format(bgDifCtaCte);//bgTotalSaldoCtaCte_2
                filaCtaCte[2] = " ";
                try {
                    filaCtaCte[3] = formats.format(caja.getFechaInicio());
                } catch (Exception e) {
                }
                try {
                    filaCtaCte[4] = formats.format(caja.getFechaFin());
                } catch (Exception e) {
                }
                filaCtaCte[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
                try {
                    filaCtaCte[6] = caja.getUsuario().getNombreUsuario();
                } catch (Exception e) {
                }
                filaCtaCte[7] = "CTA. CTE.";
                modeloTablaCaja.addRow(filaCtaCte);

                for (Object[] ctaCteArray : lstCtaCte) {
                    modeloTablaCaja.addRow(ctaCteArray);
                }//fin for

                for (Object[] ctaCteArray_2 : lstCtaCte_2) {
                    modeloTablaCaja.addRow(ctaCteArray_2);
                }//fin for            
            }//fin if       

            //SUELDO
            if (bgSueldo.compareTo(new BigDecimal("0.00")) != 0) {
                Object[] filaSueldo = new Object[8];
                filaSueldo[0] = " * PAGO DE SUELDO";
                filaSueldo[1] = formatoConComa.format(bgSueldo);//.toString().replace('.', ',')
                filaSueldo[2] = " ";
                try {
                    filaSueldo[3] = formats.format(caja.getFechaInicio());
                } catch (Exception e) {
                }
                try {
                    filaSueldo[4] = formats.format(caja.getFechaFin());
                } catch (Exception e) {
                }
                filaSueldo[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
                try {
                    filaSueldo[6] = caja.getUsuario().getNombreUsuario();
                } catch (Exception e) {
                }
                filaSueldo[7] = "PAGO DE SUELDO";
                modeloTablaCaja.addRow(filaSueldo);

                for (Object[] sueldoArray : lstSueldo) {
                    modeloTablaCaja.addRow(sueldoArray);
                }//fin for
            }//fin if    

            //INGRESO
            if (bgIngreso.compareTo(new BigDecimal("0.00")) != 0) {
                Object[] filaIngreso = new Object[8];
                filaIngreso[0] = " * INGRESOS";
                filaIngreso[1] = "-" + formatoConComa.format(bgIngreso);//.toString().replace('.', ',')
                filaIngreso[2] = " ";
                try {
                    filaIngreso[3] = formats.format(caja.getFechaInicio());
                } catch (Exception e) {
                }
                try {
                    filaIngreso[4] = formats.format(caja.getFechaFin());
                } catch (Exception e) {
                }
                filaIngreso[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
                try {
                    filaIngreso[6] = caja.getUsuario().getNombreUsuario();
                } catch (Exception e) {
                }
                filaIngreso[7] = "INGRESOS";
                modeloTablaCaja.addRow(filaIngreso);

                for (Object[] ingresoArray : lstIngreso) {
                    modeloTablaCaja.addRow(ingresoArray);
                }//fin for
            }//fin if        

            //TARJETA
            if (bgTarjeta.compareTo(new BigDecimal("0.00")) != 0) {

                Object[] filaCuponTarjeta = new Object[8];
                filaCuponTarjeta[0] = " * TARJETAS";
                filaCuponTarjeta[1] = formatoConComa.format(bgTarjeta);//.toString().replace('.', ',')
                filaCuponTarjeta[2] = " ";
                try {
                    filaCuponTarjeta[3] = formats.format(caja.getFechaInicio());
                } catch (Exception e) {
                }
                try {
                    filaCuponTarjeta[4] = formats.format(caja.getFechaFin());
                } catch (Exception e) {
                }
                filaCuponTarjeta[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
                try {
                    filaCuponTarjeta[6] = caja.getUsuario().getNombreUsuario();
                } catch (Exception e) {
                }
                filaCuponTarjeta[7] = "TARJETAS";
                modeloTablaCaja.addRow(filaCuponTarjeta);

                for (Object[] cuponTarjetaArray : lstTarjeta) {
                    modeloTablaCaja.addRow(cuponTarjetaArray);
                }//fin for
            }//FIN IF

            //VALES
            if (bgVale.compareTo(new BigDecimal("0.00")) != 0) {

                Object[] filaCuponVale = new Object[8];
                filaCuponVale[0] = " * VALES";
                filaCuponVale[1] = formatoConComa.format(bgVale);//.toString().replace('.', ',')
                filaCuponVale[2] = " ";
                try {
                    filaCuponVale[3] = formats.format(caja.getFechaInicio());
                } catch (Exception e) {
                }
                try {
                    filaCuponVale[4] = formats.format(caja.getFechaFin());
                } catch (Exception e) {
                }
                filaCuponVale[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
                try {
                    filaCuponVale[6] = caja.getUsuario().getNombreUsuario();
                } catch (Exception e) {
                }
                filaCuponVale[7] = "VALES";
                modeloTablaCaja.addRow(filaCuponVale);

                for (Object[] cuponValeArray : lstVale) {
                    modeloTablaCaja.addRow(cuponValeArray);
                }//fin for
            }//FIN IF        

            //RETIRO EFECTIVO
            if (bgRetiroEfvo.compareTo(new BigDecimal("0.00")) != 0) {
                Object[] filaRetiro = new Object[8];
                filaRetiro[0] = " * RETIRO EFECTIVO";
                filaRetiro[1] = formatoConComa.format(bgRetiroEfvo);//.toString().replace('.', ',')
                filaRetiro[2] = " ";
                try {
                    filaRetiro[3] = formats.format(caja.getFechaInicio());
                } catch (Exception e) {
                }
                try {
                    filaRetiro[4] = formats.format(caja.getFechaFin());
                } catch (Exception e) {
                }
                filaRetiro[5] = caja.getSucursal().getCodigo() + " - " + caja.getSucursal().getNombre();
                try {
                    filaRetiro[6] = caja.getUsuario().getNombreUsuario();
                } catch (Exception e) {
                }
                filaRetiro[7] = "RETIRO EFECTIVO";
                modeloTablaCaja.addRow(filaRetiro);

                for (Object[] retiroArray : lstRetiroEfvo) {
                    modeloTablaCaja.addRow(retiroArray);
                }//fin for
            }//fin if         

            FormatoTablaConColor ft = new FormatoTablaConColor(0);
            tblCaja.setDefaultRenderer(Object.class, ft);
        }//fin cargarCaja  

        @Override
        public void run() {

            int progreso = 0;
            this.botonUno.setEnabled(Boolean.FALSE);
            this.botonDos.setEnabled(Boolean.FALSE);
            jProgressBar1.setStringPainted(true);
            for (Caja caja : this.lstCaja) {
                progreso++;
                jProgressBar1.setValue(progreso);
                jProgressBar1.updateUI();

                cargarCaja(caja);
            }//fin for

            this.botonUno.setEnabled(Boolean.TRUE);
            this.botonDos.setEnabled(Boolean.TRUE);

        }

    }//fin clase
}
