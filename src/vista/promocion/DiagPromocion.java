/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.promocion;

import entidades.Sucursal;
import entidades.articulo.Articulo;
import entidades.articulo.ListaPrecio;
import entidades.articulo.PrecioArticulo;
import entidades.promocion.DiaSemana;
import entidades.promocion.Promocion;
import entidades.promocion.PromocionArticulo;
import facade.ArticuloFacade;
import facade.ListaPrecioFacade;
import facade.PrecioArticuloFacade;
import facade.PromocionFacade;
import includes.Comunes;
import includes.ExportarExcel;
import includes.ModeloTablaNoEditable;
import java.awt.Color;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import org.apache.commons.validator.routines.BigDecimalValidator;

/**
 *
 * @author hugo
 */
public class DiagPromocion extends javax.swing.JDialog {

    private Promocion promocion;
    private String tipoOperacion;
    private List<PromocionArticulo> articulosEnPromocion = new ArrayList<>();
    private ModeloTablaNoEditable modeloTablaPromocions;
    private List<ListaPrecio> listasPrecio;
    private ModeloTablaNoEditable modeloTablaArticulos;
    private Sucursal sucursal;
    private Vector headers = new Vector();
    private Vector data = new Vector();
    boolean flag;

    public DiagPromocion(java.awt.Frame parent, boolean modal, String tipoOperacion, Sucursal sucursal) {
        super(parent, modal);
        initComponents();
        this.sucursal = sucursal;
        this.tipoOperacion = tipoOperacion;
        inicializarComponentes();
    }

    public DiagPromocion(java.awt.Frame parent, boolean modal, String tipoOperacion, Promocion promocion, Sucursal sucursal) {
        super(parent, modal);
        initComponents();
        this.sucursal = sucursal;
        this.promocion = promocion;
        this.tipoOperacion = tipoOperacion;
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rbPrecio = new javax.swing.JRadioButton();
        rbPorcentaje = new javax.swing.JRadioButton();
        dpFechaInicio = new org.jdesktop.swingx.JXDatePicker();
        dpFechaFin = new org.jdesktop.swingx.JXDatePicker();
        chkLunes = new javax.swing.JCheckBox();
        chkMartes = new javax.swing.JCheckBox();
        chkMiercoles = new javax.swing.JCheckBox();
        chkJueves = new javax.swing.JCheckBox();
        chkViernes = new javax.swing.JCheckBox();
        chkSabado = new javax.swing.JCheckBox();
        chkDomingo = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        rbAlgunosArticulos = new javax.swing.JRadioButton();
        rbTodosLosArticulos = new javax.swing.JRadioButton();
        lblPorcentajeATodos = new javax.swing.JLabel();
        tfPorcentajeATodos = new javax.swing.JTextField();
        pnArticulos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbArticulos = new javax.swing.JTable();
        btbAgregarArticulo = new javax.swing.JButton();
        btbModificarArticulo = new javax.swing.JButton();
        btbQuitarArticulo = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        lblArticulosDondeSeAplica = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spPrioridad = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        chkHabilitada = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        btnAceptar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jPanel1.border.title"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jLabel1.text")); // NOI18N

        tfNombre.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.tfNombre.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jLabel4.text")); // NOI18N

        buttonGroup1.add(rbPrecio);
        rbPrecio.setSelected(true);
        rbPrecio.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.rbPrecio.text")); // NOI18N
        rbPrecio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbPrecioItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbPorcentaje);
        rbPorcentaje.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.rbPorcentaje.text")); // NOI18N
        rbPorcentaje.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbPorcentajeItemStateChanged(evt);
            }
        });

        dpFechaInicio.setFormats("dd/MM/yyyy");

        dpFechaFin.setFormats("dd/MM/yyyy");

        chkLunes.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.chkLunes.text")); // NOI18N

        chkMartes.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.chkMartes.text")); // NOI18N

        chkMiercoles.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.chkMiercoles.text")); // NOI18N

        chkJueves.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.chkJueves.text")); // NOI18N

        chkViernes.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.chkViernes.text")); // NOI18N

        chkSabado.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.chkSabado.text")); // NOI18N

        chkDomingo.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.chkDomingo.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jLabel6.text")); // NOI18N

        buttonGroup2.add(rbAlgunosArticulos);
        rbAlgunosArticulos.setSelected(true);
        rbAlgunosArticulos.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.rbAlgunosArticulos.text")); // NOI18N
        rbAlgunosArticulos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbAlgunosArticulosItemStateChanged(evt);
            }
        });

        buttonGroup2.add(rbTodosLosArticulos);
        rbTodosLosArticulos.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.rbTodosLosArticulos.text")); // NOI18N
        rbTodosLosArticulos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbTodosLosArticulosItemStateChanged(evt);
            }
        });

        lblPorcentajeATodos.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.lblPorcentajeATodos.text")); // NOI18N

        tfPorcentajeATodos.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.tfPorcentajeATodos.text")); // NOI18N
        tfPorcentajeATodos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfPorcentajeATodosFocusGained(evt);
            }
        });

        tbArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbArticulos);

        btbAgregarArticulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add.png"))); // NOI18N
        btbAgregarArticulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbAgregarArticuloActionPerformed(evt);
            }
        });

        btbModificarArticulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/edit.png"))); // NOI18N
        btbModificarArticulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbModificarArticuloActionPerformed(evt);
            }
        });

        btbQuitarArticulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        btbQuitarArticulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbQuitarArticuloActionPerformed(evt);
            }
        });

        jLabel7.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jLabel7.text")); // NOI18N

        javax.swing.GroupLayout pnArticulosLayout = new javax.swing.GroupLayout(pnArticulos);
        pnArticulos.setLayout(pnArticulosLayout);
        pnArticulosLayout.setHorizontalGroup(
            pnArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnArticulosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnArticulosLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnArticulosLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(btbAgregarArticulo))
                            .addComponent(btbModificarArticulo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btbQuitarArticulo, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(pnArticulosLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnArticulosLayout.setVerticalGroup(
            pnArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnArticulosLayout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnArticulosLayout.createSequentialGroup()
                        .addComponent(btbAgregarArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btbModificarArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btbQuitarArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblArticulosDondeSeAplica.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.lblArticulosDondeSeAplica.text_1")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jLabel5.text_1")); // NOI18N

        jLabel8.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.jLabel8.text")); // NOI18N

        chkHabilitada.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.chkHabilitada.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbPrecio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbPorcentaje))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkLunes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkMartes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkMiercoles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkJueves)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkViernes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkSabado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDomingo))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblArticulosDondeSeAplica)
                                .addGap(18, 18, 18)
                                .addComponent(rbAlgunosArticulos))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblPorcentajeATodos)
                                .addGap(18, 18, 18)
                                .addComponent(tfPorcentajeATodos, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(spPrioridad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(chkHabilitada))
                            .addComponent(rbTodosLosArticulos)))
                    .addComponent(pnArticulos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dpFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dpFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(rbPrecio)
                    .addComponent(rbPorcentaje))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(dpFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(dpFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(chkLunes)
                    .addComponent(chkMartes)
                    .addComponent(chkMiercoles)
                    .addComponent(chkJueves)
                    .addComponent(chkViernes)
                    .addComponent(chkSabado)
                    .addComponent(chkDomingo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbAlgunosArticulos)
                    .addComponent(rbTodosLosArticulos)
                    .addComponent(lblArticulosDondeSeAplica))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPorcentajeATodos)
                    .addComponent(tfPorcentajeATodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(spPrioridad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(chkHabilitada))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnArticulos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/save.png"))); // NOI18N
        btnAceptar.setText(org.openide.util.NbBundle.getMessage(DiagPromocion.class, "DiagPromocion.btnAceptar.text")); // NOI18N
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(264, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAceptar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btbQuitarArticuloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbQuitarArticuloActionPerformed
        flag = true;
        quitarArticulo();
    }//GEN-LAST:event_btbQuitarArticuloActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        aceptar();
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btbAgregarArticuloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbAgregarArticuloActionPerformed
        flag = true;
        agregarPromocionArticulo();
    }//GEN-LAST:event_btbAgregarArticuloActionPerformed

    private void btbModificarArticuloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbModificarArticuloActionPerformed
        flag = true;
        modificarPromocionArticulo();
    }//GEN-LAST:event_btbModificarArticuloActionPerformed

    private void rbAlgunosArticulosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbAlgunosArticulosItemStateChanged
        alternarPanel();
    }//GEN-LAST:event_rbAlgunosArticulosItemStateChanged

    private void rbTodosLosArticulosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbTodosLosArticulosItemStateChanged
        alternarPanel();
    }//GEN-LAST:event_rbTodosLosArticulosItemStateChanged

    private void rbPrecioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbPrecioItemStateChanged
        alternarPrecioPorcentaje();
    }//GEN-LAST:event_rbPrecioItemStateChanged

    private void rbPorcentajeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbPorcentajeItemStateChanged
        alternarPrecioPorcentaje();
    }//GEN-LAST:event_rbPorcentajeItemStateChanged

    private void tfPorcentajeATodosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfPorcentajeATodosFocusGained
        tfPorcentajeATodos.selectAll();
    }//GEN-LAST:event_tfPorcentajeATodosFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiagPromocion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiagPromocion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiagPromocion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiagPromocion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btbAgregarArticulo;
    private javax.swing.JButton btbModificarArticulo;
    private javax.swing.JButton btbQuitarArticulo;
    private javax.swing.JButton btnAceptar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox chkDomingo;
    private javax.swing.JCheckBox chkHabilitada;
    private javax.swing.JCheckBox chkJueves;
    private javax.swing.JCheckBox chkLunes;
    private javax.swing.JCheckBox chkMartes;
    private javax.swing.JCheckBox chkMiercoles;
    private javax.swing.JCheckBox chkSabado;
    private javax.swing.JCheckBox chkViernes;
    private org.jdesktop.swingx.JXDatePicker dpFechaFin;
    private org.jdesktop.swingx.JXDatePicker dpFechaInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblArticulosDondeSeAplica;
    private javax.swing.JLabel lblPorcentajeATodos;
    private javax.swing.JPanel pnArticulos;
    private javax.swing.JRadioButton rbAlgunosArticulos;
    private javax.swing.JRadioButton rbPorcentaje;
    private javax.swing.JRadioButton rbPrecio;
    private javax.swing.JRadioButton rbTodosLosArticulos;
    private javax.swing.JSpinner spPrioridad;
    private javax.swing.JTable tbArticulos;
    private javax.swing.JTextField tfNombre;
    private javax.swing.JTextField tfPorcentajeATodos;
    // End of variables declaration//GEN-END:variables

    private void inicializarComponentes() {
//        int prioridadInicial = PromocionFacade.getInstance().getPrioridadDisponible();
//        // from 0 to 9, in 1.0 steps start value 5  
//        SpinnerNumberModel modelo = new SpinnerNumberModel(prioridadInicial+1, prioridadInicial+1, 15, 1);
//        spPrioridad.setModel(modelo);

        flag = true;
        this.setTitle("Promoción");
        if (tipoOperacion.equals("Modificación")) {
            cargarDatosPromocion();
        }
        alternarPrecioPorcentaje();
        alternarPanel();

    }

    private void aceptar() {

        switch (tipoOperacion) {
            case "Alta":
                if (validarPromocion()) {
                    promocion = new Promocion();
                    promocion.setNombre(tfNombre.getText().toUpperCase());
                    promocion.setFechaInicio(dpFechaInicio.getDate());
                    promocion.setFechaFin(dpFechaFin.getDate());
                    promocion.setEsPorPrecio(rbPrecio.isSelected());
                    List<DiaSemana> dias = new ArrayList<>();
                    if (chkLunes.isSelected()) {
                        dias.add(DiaSemana.LUNES);
                    }
                    if (chkMartes.isSelected()) {
                        dias.add(DiaSemana.MARTES);
                    }
                    if (chkMiercoles.isSelected()) {
                        dias.add(DiaSemana.MIERCOLES);
                    }
                    if (chkJueves.isSelected()) {
                        dias.add(DiaSemana.JUEVES);
                    }
                    if (chkViernes.isSelected()) {
                        dias.add(DiaSemana.VIERNES);
                    }
                    if (chkSabado.isSelected()) {
                        dias.add(DiaSemana.SABADO);
                    }
                    if (chkDomingo.isSelected()) {
                        dias.add(DiaSemana.DOMINGO);
                    }
                    promocion.setDiasSemanas(dias);
                    promocion.setPorcentajeATodos(new BigDecimal(tfPorcentajeATodos.getText().replace(",", ".")));
                    promocion.setPrioridad((int) spPrioridad.getValue());
                    promocion.setHabilitada(chkHabilitada.isSelected());
                    promocion.setPromocionesArticulos(articulosEnPromocion);
                    promocion.setSucursal(sucursal);
                    PromocionFacade.getInstance().alta(promocion);
                    JOptionPane.showMessageDialog(this, "Promoción agregada!");
                    this.dispose();

                }
                break;
            case "Modificación":
                if (validarPromocion2()) {
                    promocion.setNombre(tfNombre.getText());
                    promocion.setFechaInicio(dpFechaInicio.getDate());
                    promocion.setFechaFin(dpFechaFin.getDate());
                    promocion.setEsPorPrecio(rbPrecio.isSelected());
                    List<DiaSemana> dias = new ArrayList<>();
                    if (chkLunes.isSelected()) {
                        dias.add(DiaSemana.LUNES);
                    }
                    if (chkMartes.isSelected()) {
                        dias.add(DiaSemana.MARTES);
                    }
                    if (chkMiercoles.isSelected()) {
                        dias.add(DiaSemana.MIERCOLES);
                    }
                    if (chkJueves.isSelected()) {
                        dias.add(DiaSemana.JUEVES);
                    }
                    if (chkViernes.isSelected()) {
                        dias.add(DiaSemana.VIERNES);
                    }
                    if (chkSabado.isSelected()) {
                        dias.add(DiaSemana.SABADO);
                    }
                    if (chkDomingo.isSelected()) {
                        dias.add(DiaSemana.DOMINGO);
                    }
                    promocion.setDiasSemanas(dias);
                    promocion.setPorcentajeATodos(new BigDecimal(tfPorcentajeATodos.getText().replace(",", ".")));
                    promocion.setPrioridad((int) spPrioridad.getValue());
                    promocion.setHabilitada(chkHabilitada.isSelected());
                    promocion.setPromocionesArticulos(articulosEnPromocion);
                    promocion.setSucursal(sucursal);
                    PromocionFacade.getInstance().modificar(promocion);
                    JOptionPane.showMessageDialog(this, "Promoción modificada!");
                    this.dispose();

                }
                break;

        }

    }

    private void cargarDatosPromocion() {
        try {
            spPrioridad.setValue(promocion.getPrioridad());
        } catch (Exception e) {

        }
        try {
            chkHabilitada.setSelected(promocion.isHabilitada());
        } catch (Exception e) {

        }
        try {
            tfNombre.setText(promocion.getNombre());
        } catch (Exception e) {

        }
        try {
            dpFechaInicio.setDate(promocion.getFechaInicio());
        } catch (Exception e) {

        }
        try {
            dpFechaFin.setDate(promocion.getFechaFin());
        } catch (Exception e) {

        }
        try {
            rbPrecio.setSelected(promocion.isEsPorPrecio());
        } catch (Exception e) {

        }
        try {
            rbPorcentaje.setSelected(!promocion.isEsPorPrecio());
        } catch (Exception e) {

        }
        try {
            chkLunes.setSelected(promocion.getDiasSemanas().contains(DiaSemana.LUNES));
            chkMartes.setSelected(promocion.getDiasSemanas().contains(DiaSemana.MARTES));
            chkMiercoles.setSelected(promocion.getDiasSemanas().contains(DiaSemana.MIERCOLES));
            chkJueves.setSelected(promocion.getDiasSemanas().contains(DiaSemana.JUEVES));
            chkViernes.setSelected(promocion.getDiasSemanas().contains(DiaSemana.VIERNES));
            chkSabado.setSelected(promocion.getDiasSemanas().contains(DiaSemana.SABADO));
            chkDomingo.setSelected(promocion.getDiasSemanas().contains(DiaSemana.DOMINGO));

        } catch (Exception e) {

        }
        try {
            tfPorcentajeATodos.setText(promocion.getPorcentajeATodos().toString());
        } catch (Exception e) {
        }
        try {
            if (promocion.getPromocionesArticulos().isEmpty()) {
                rbTodosLosArticulos.setSelected(true);
            }
        } catch (Exception e) {
        }
        try {
            articulosEnPromocion = promocion.getPromocionesArticulos();
            cargarTablaArticulos();
        } catch (Exception e) {
        }

    }

    private boolean validarPromocion() {
        if (tfNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener nombre", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (dpFechaInicio.getDate() == null) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener una fecha de inicio", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (dpFechaFin.getDate() == null) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener una fecha de fin", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (dpFechaFin.getDate().before(dpFechaInicio.getDate())) {
            JOptionPane.showMessageDialog(this,
                    "La fecha de fin no puede ser menor a la de inicio", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (rbPrecio.isSelected() == rbPorcentaje.isSelected()) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener un tipo", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (rbAlgunosArticulos.isSelected() && articulosEnPromocion.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "La promoción Porcentaje para algunos articulos debe tener una lista de articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            if (rbTodosLosArticulos.isSelected() && BigDecimal.valueOf(Double.parseDouble(tfPorcentajeATodos.getText())).compareTo(BigDecimal.ZERO) <= 0) {
                JOptionPane.showMessageDialog(this,
                        "La promoción debe tener un porcentaje mayor que cero para todos los articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (NumberFormatException | HeadlessException e) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener un porcentaje correcto para todos los articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);

            return false;
        }

        if (rbTodosLosArticulos.isSelected()
                && !BigDecimalValidator.getInstance().isValid(tfPorcentajeATodos.getText().replace(",", "."))) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener un porcentaje correcto para todos los articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!chkLunes.isSelected()
                && !chkMartes.isSelected() && !chkMiercoles.isSelected()
                && !chkJueves.isSelected() && !chkViernes.isSelected()
                && !chkSabado.isSelected() && !chkDomingo.isSelected()) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe aplicarse al menos a un dia de la semana", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (PromocionFacade.getInstance().buscarPrioridad((int) spPrioridad.getValue(),sucursal)) {
            JOptionPane.showMessageDialog(this, "La prioridad Seleccionada ya ha sido Asignada a otra promocion", "Mensaje", JOptionPane.ERROR_MESSAGE);
            spPrioridad.requestFocus();
            return false;
        }
        return true;
    }

    private boolean validarPromocion2() {
        if (tfNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener nombre", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (dpFechaInicio.getDate() == null) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener una fecha de inicio", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (dpFechaFin.getDate() == null) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener una fecha de fin", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (dpFechaFin.getDate().before(dpFechaInicio.getDate())) {
            JOptionPane.showMessageDialog(this,
                    "La fecha de fin no puede ser menor a la de inicio", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (rbPrecio.isSelected() == rbPorcentaje.isSelected()) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener un tipo", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (rbAlgunosArticulos.isSelected() && articulosEnPromocion.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "La promoción Porcentaje para algunos articulos debe tener una lista de articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            if (rbTodosLosArticulos.isSelected() && BigDecimal.valueOf(Double.parseDouble(tfPorcentajeATodos.getText())).compareTo(BigDecimal.ZERO) <= 0) {
                JOptionPane.showMessageDialog(this,
                        "La promoción debe tener un porcentaje mayor que cero para todos los articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } catch (NumberFormatException | HeadlessException e) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener un porcentaje correcto para todos los articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);

            return false;
        }

        if (rbTodosLosArticulos.isSelected()
                && !BigDecimalValidator.getInstance().isValid(tfPorcentajeATodos.getText().replace(",", "."))) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe tener un porcentaje correcto para todos los articulos", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!chkLunes.isSelected()
                && !chkMartes.isSelected() && !chkMiercoles.isSelected()
                && !chkJueves.isSelected() && !chkViernes.isSelected()
                && !chkSabado.isSelected() && !chkDomingo.isSelected()) {
            JOptionPane.showMessageDialog(this,
                    "La promoción debe aplicarse al menos a un dia de la semana", "Mensaje", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (PromocionFacade.getInstance().buscarPrioridad((int) spPrioridad.getValue(),promocion,sucursal)) {
            
            JOptionPane.showMessageDialog(this, "La prioridad Seleccionada ya ha sido Asignada a otra promocion", "Mensaje", JOptionPane.ERROR_MESSAGE);
            spPrioridad.requestFocus();
            return false;
        }
        return true;
    }

    private void alternarPanel() {
        pnArticulos.setVisible(!rbTodosLosArticulos.isSelected());
        tfPorcentajeATodos.setVisible(rbTodosLosArticulos.isSelected());
        lblPorcentajeATodos.setVisible(rbTodosLosArticulos.isSelected());
        if (rbAlgunosArticulos.isSelected()) {
            tfPorcentajeATodos.setText("0");
        } else {
            vaciarArticulos();
        }
    }

    private void alternarPrecioPorcentaje() {
        lblArticulosDondeSeAplica.setVisible(!rbPrecio.isSelected());
        rbAlgunosArticulos.setVisible(!rbPrecio.isSelected());
        rbTodosLosArticulos.setVisible(!rbPrecio.isSelected());
        lblPorcentajeATodos.setVisible(!rbPrecio.isSelected());
        tfPorcentajeATodos.setVisible(!rbPrecio.isSelected());
        if (rbPrecio.isSelected()) {
            tfPorcentajeATodos.setText("0");
            rbAlgunosArticulos.setSelected(true);
        }
        alternarPanel();
    }

    private void vaciarArticulos() {
        articulosEnPromocion.clear();
        cargarTablaArticulos();
    }

    private void modificarPromocionArticulo() {
        if (tbArticulos.getSelectedRow() != -1) {
            PromocionArticulo promocionArticulo = articulosEnPromocion.get(tbArticulos.getSelectedRow());
            DiagArticuloPromocion diagPromocion = new DiagArticuloPromocion(null, true, "Modificación", promocionArticulo);
            diagPromocion.setLocation(Comunes.centrarDialog(diagPromocion));
            diagPromocion.setVisible(true);
            if (diagPromocion.getPromocionArticulo() != null) {
                articulosEnPromocion.set(articulosEnPromocion.indexOf(diagPromocion.getPromocionArticulo()), diagPromocion.getPromocionArticulo());
                cargarTablaArticulos();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un artículo en promoción");
        }
    }

    private void agregarPromocionArticulo() {
        DiagArticuloPromocion diagPromocion = new DiagArticuloPromocion(null, true, "Alta", promocion);
        diagPromocion.setLocation(Comunes.centrarDialog(diagPromocion));
        diagPromocion.setVisible(true);
        if (diagPromocion.getPromocionArticulo() != null) {
            articulosEnPromocion.add(diagPromocion.getPromocionArticulo());
            cargarTablaArticulos();
        }
    }

    private void cargarTablaArticulos() {
        modeloTablaPromocions = new ModeloTablaNoEditable();
        cargarEncabezadosTablaPromocions(modeloTablaPromocions);
        configurarTabla(tbArticulos);
        try {
            cargarArticulosEnPromocion();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "Error: " + ex);
        }
    }

    private void cargarEncabezadosTablaPromocions(ModeloTablaNoEditable modeloTablaPromocions) {
        modeloTablaPromocions.addColumn("Artículo");
        modeloTablaPromocions.addColumn("Valor");
        tbArticulos.setModel(modeloTablaPromocions);
    }

    private void configurarTabla(JTable tbl) {
        JViewport scroll = (JViewport) tbl.getParent();
        int ancho = scroll.getWidth();
        int anchoColumna = 0;
        TableColumnModel modeloColumna = tbl.getColumnModel();
        TableColumn columnaTabla;
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            columnaTabla = modeloColumna.getColumn(i);
            switch (i) {
                case 0:
                    anchoColumna = (1 * ancho) / 100;
                    break;
                case 1:
                    anchoColumna = (20 * ancho) / 100;
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    anchoColumna = (5 * ancho) / 100;
                    break;
            }
            columnaTabla.setPreferredWidth(anchoColumna);
            tbl.setColumnModel(modeloColumna);
        }
        tbl.getTableHeader().setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
        tbl.getTableHeader().setBackground(java.awt.Color.WHITE);
        tbl.getTableHeader().setForeground(Color.BLACK);
        //Si le queremos cambiar el tamaño a la tablita
        tbl.setFont(new java.awt.Font("Dialog",
                java.awt.Font.PLAIN, 10));
    }

    private void cargarArticulosEnPromocion() {
        try {
            for (PromocionArticulo articulo : articulosEnPromocion) {
                cargarPromocion(articulo);
            }
            tbArticulos.setModel(modeloTablaPromocions);
        } catch (Exception ex) {
            Logger.getLogger(DiagAdminPromociones.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void cargarPromocion(PromocionArticulo promocion) {
        Object[] fila = new Object[2];
        try {
            fila[0] = promocion.getArticulo();
        } catch (Exception e) {
        }
        try {
            fila[1] = promocion.getValor();
        } catch (Exception e) {
        }

        modeloTablaPromocions.addRow(fila);
    }

    private void quitarArticulo() {
        if (tbArticulos.getSelectedRow() != -1) {
            int i = JOptionPane.showConfirmDialog(this, "¿Desea eliminar el Registro seleccionado?", "Confirmar eliminacion", JOptionPane.YES_NO_OPTION);
            if (i == 0) {
                articulosEnPromocion.remove(tbArticulos.getSelectedRow());
                cargarTablaArticulos();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un artículo en promoción");
        }
    }

    private void exportar() {
        new ExportarExcel().crearExcelJtable(tbArticulos, "Listado de Precios");
    }

    private void cargarTabla() {

        List<Integer> columnasNoEditables = new ArrayList<>();
        columnasNoEditables.add(0);
        columnasNoEditables.add(1);
        columnasNoEditables.add(2);
        modeloTablaArticulos = new ModeloTablaNoEditable(columnasNoEditables);
        cargarEncabezadosTabla(modeloTablaArticulos);
        cargarArticulos();
    }

    private void cargarEncabezadosTabla(ModeloTablaNoEditable modeloTablaArticulos) {
        modeloTablaArticulos.addColumn("ID");
        modeloTablaArticulos.addColumn("Código");
        modeloTablaArticulos.addColumn("Articulo");

        for (ListaPrecio lista : listasPrecio) {
            modeloTablaArticulos.addColumn(lista.getDescripcion());
        }
        tbArticulos.setModel(modeloTablaArticulos);
    }

    private void cargarArticulos() {
        for (Articulo articulo : ArticuloFacade.getInstance().getTodos()) {
            cargarArticulo(articulo);
        }
    }

    private void cargarArticulo(Articulo articulo) {
        int filas = modeloTablaArticulos.getColumnCount();
        int numeroFila = 0;
        Object[] fila = new Object[filas];
        fila[numeroFila++] = articulo.getId();
        fila[numeroFila++] = articulo.getCodigoBarra();
        fila[numeroFila++] = articulo.getDescripcion();
        PrecioArticuloFacade precioFacade = PrecioArticuloFacade.getInstance();
        for (ListaPrecio lista : listasPrecio) {
            PrecioArticulo pa = precioFacade.get(articulo, lista, sucursal);
            if (pa == null) {
                pa = new PrecioArticulo();
                pa.setArticulo(articulo);
                pa.setListaPrecio(lista);
                pa.setSucursal(sucursal);
                pa.setPrecio(BigDecimal.ZERO);
                precioFacade.alta(pa);
            }
            fila[numeroFila++] = pa.getPrecio();
        }
        modeloTablaArticulos.addRow(fila);
    }

    private void importar() {
        JFileChooser jChooser = new JFileChooser(System.getProperty("user.dir"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Excel", "xls");
        jChooser.setFileFilter(filter);
        jChooser.showOpenDialog(this);
        File file = jChooser.getSelectedFile();
        if (file == null || !file.getName().endsWith("xls")) {
            JOptionPane.showMessageDialog(null, "Please select only Excel file.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            leerDatosExcel(file);
            List<Integer> columnasNoEditables = new ArrayList<>();
            columnasNoEditables.add(0);
            columnasNoEditables.add(1);
            columnasNoEditables.add(2);
            ModeloTablaNoEditable model = new ModeloTablaNoEditable(data, headers, columnasNoEditables);
            tbArticulos.setModel(model);
        }
    }

    private void leerDatosExcel(File file) {
        Workbook workbook = null;
        try {
            try {
                workbook = Workbook.getWorkbook(file);
            } catch (IOException ex) {
                System.out.println("Error: " + ex);
            }
            Sheet sheet = workbook.getSheet(0);
            headers.clear();
            for (int i = 0; i < sheet.getColumns(); i++) {
                Cell cell1 = sheet.getCell(i, 0);
                headers.add(cell1.getContents());
            }
            data.clear();
            for (int j = 1; j < sheet.getRows(); j++) {
                Vector d = new Vector();
                for (int i = 0; i < sheet.getColumns(); i++) {
                    Cell cell = sheet.getCell(i, j);
                    d.add(cell.getContents());
                }
                d.add("\n");
                data.add(d);
            }
        } catch (BiffException e) {
            e.printStackTrace();
        }
    }

    private void cargarTablaTodosArticulos() {
        listasPrecio = ListaPrecioFacade.getInstance().getTodos();
        cargarTabla();
    }

    private void guardarArticulos() {
        promocion = new Promocion();
        promocion.setNombre(tfNombre.getText());
        promocion.setFechaInicio(dpFechaInicio.getDate());
        promocion.setFechaFin(dpFechaFin.getDate());
        promocion.setEsPorPrecio(rbPrecio.isSelected());
        List<DiaSemana> dias = new ArrayList<>();
        if (chkLunes.isSelected()) {
            dias.add(DiaSemana.LUNES);
        }
        if (chkMartes.isSelected()) {
            dias.add(DiaSemana.MARTES);
        }
        if (chkMiercoles.isSelected()) {
            dias.add(DiaSemana.MIERCOLES);
        }
        if (chkJueves.isSelected()) {
            dias.add(DiaSemana.JUEVES);
        }
        if (chkViernes.isSelected()) {
            dias.add(DiaSemana.VIERNES);
        }
        if (chkSabado.isSelected()) {
            dias.add(DiaSemana.SABADO);
        }
        if (chkDomingo.isSelected()) {
            dias.add(DiaSemana.DOMINGO);
        }
        promocion.setDiasSemanas(dias);
        promocion.setPorcentajeATodos(new BigDecimal(tfPorcentajeATodos.getText().replace(",", ".")));
        promocion.setPrioridad((int) spPrioridad.getValue());
        promocion.setHabilitada(chkHabilitada.isSelected());

        cargarListaArticulos();

        promocion.setPromocionesArticulos(articulosEnPromocion);
        PromocionFacade.getInstance().alta(promocion);
        JOptionPane.showMessageDialog(this, "Promoción agregada!");
        this.dispose();
    }

    private void cargarListaArticulos() {
        try {
            for (int i = 0; i < tbArticulos.getRowCount(); i++) {
                PromocionArticulo proArticulo = new PromocionArticulo();
                proArticulo.setArticulo(ArticuloFacade.getInstance().buscar((Long) tbArticulos.getValueAt(i, 0)));
                proArticulo.setValor((BigDecimal) tbArticulos.getValueAt(i, 3));
                articulosEnPromocion.add(proArticulo);
            }
        } catch (Exception e) {
            System.out.println("exception: " + e);
        }
    }
}
